"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[16761],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>h});var r=o(67294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(o),m=n,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return o?r.createElement(h,i(i({ref:t},u),{},{components:o})):r.createElement(h,i({ref:t},u))}));function h(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<a;p++)i[p]=o[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},45776:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=o(87462),n=(o(67294),o(3905));const a={title:"Network Team Update",slug:"2024-12-23-network",authors:"coot",tags:["network"],hide_table_of_contents:!1},i=void 0,s={permalink:"/2024-12-23-network",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/blog/2024-12-23-network.md",source:"@site/blog/2024-12-23-network.md",title:"Network Team Update",description:"Overview of sprint 77",date:"2024-12-23T00:00:00.000Z",formattedDate:"December 23, 2024",tags:[{label:"network",permalink:"/tags/network"}],readingTime:1.795,hasTruncateMarker:!1,authors:[{name:"Marcin Szamotulski",title:"Network Team Lead",url:"https://github.com/coot",imageURL:"https://github.com/coot.png",key:"coot"}],frontMatter:{title:"Network Team Update",slug:"2024-12-23-network",authors:"coot",tags:["network"],hide_table_of_contents:!1},prevItem:{title:"Performance & Tracing Update",permalink:"/2024-12-30-performance-and-tracing"},nextItem:{title:"SRE Team Update",permalink:"/2024-12-20-sre"}},l={authorsImageUrls:[void 0]},p=[{value:"Overview of sprint 77",id:"overview-of-sprint-77",level:2},{value:"Initiator only mode for local roots",id:"initiator-only-mode-for-local-roots",level:3},{value:"Support systems with multiple IP addresses",id:"support-systems-with-multiple-ip-addresses",level:3},{value:"Reusable diffusion",id:"reusable-diffusion",level:3},{value:"Tx-Submission Logic",id:"tx-submission-logic",level:3},{value:"SRV record support",id:"srv-record-support",level:3},{value:"Technical Debt",id:"technical-debt",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...o}=e;return(0,n.kt)(c,(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"overview-of-sprint-77"},"Overview of ",(0,n.kt)("a",{parentName:"h2",href:"https://github.com/orgs/IntersectMBO/projects/5/views/1?filterQuery=sprint%3A%22Sprint+77%22"},"sprint 77")),(0,n.kt)("h3",{id:"initiator-only-mode-for-local-roots"},"Initiator only mode for local roots"),(0,n.kt)("p",null,"We implemented the initiator-only mode for local roots peers described in\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/issues/5020"},"ouroboros-network#5020"),".  This feature will be available in\n",(0,n.kt)("inlineCode",{parentName:"p"},"cardano-node-10.3")," (",(0,n.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/cardano-node/pull/6055"},"cardano-node#6055"),")."),(0,n.kt)("p",null,"One will be able to specify ",(0,n.kt)("inlineCode",{parentName:"p"},"diffusionMode")," (either ",(0,n.kt)("inlineCode",{parentName:"p"},"InitiatorOnly")," or\n",(0,n.kt)("inlineCode",{parentName:"p"},"IntiatorAndRespoinder"),", the latter is the default) for all local roots in\na given local roots group, e.g."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{ "localRoots":\n    [ { "accessPoints":\n          [ { "address": "10.0.0.1"\n            , "port": 3001\n            }\n          ]\n      , "advertise": false\n      , "diffusionMode": "InitiatorOnly"\n      , "warmValency": 1\n      , "hotValency": 1\n      }\n    , { "accessPoints":\n          [ { "address": "10.0.0.2"\n            , "port": 3001\n            }\n          ]\n      , "advertise": true\n      , "diffusionMode": "InititiatorAndResponder"\n      , "warmValency": 1\n      , "hotValency": 1\n      }\n    ]\n, "publicRoots": []\n, "useLedgerAfterSlot": -1\n}\n')),(0,n.kt)("p",null,"As part of ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/issues/5020"},"ouroboros-network#5020")," we had to change how connections are\nidentified in the simulated testnet environment.  We exposed\n",(0,n.kt)("inlineCode",{parentName:"p"},"ConnStateIdSupply")," through P2P interfaces, which allows us to use a global\n",(0,n.kt)("inlineCode",{parentName:"p"},"ConnStateIdSupply")," for all nodes in the simulation. This way, ",(0,n.kt)("inlineCode",{parentName:"p"},"ConnStateId")," is\nunique for each connection in the simulation. See ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/issues/5026"},"ouroboros-network#5026"),"."),(0,n.kt)("h3",{id:"support-systems-with-multiple-ip-addresses"},"Support systems with multiple IP addresses"),(0,n.kt)("p",null,"We merged ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/issues/5017"},"ouroboros-network#5017")," which allows to run ",(0,n.kt)("inlineCode",{parentName:"p"},"cardano-node")," on\nsystems with multiple network interfaces or a single interface with multiple IP\naddresses."),(0,n.kt)("h3",{id:"reusable-diffusion"},"Reusable diffusion"),(0,n.kt)("p",null,"We were working on early integration of reusable diffusion work stream with\n",(0,n.kt)("inlineCode",{parentName:"p"},"ouroboros-consensus")," & ",(0,n.kt)("inlineCode",{parentName:"p"},"cardano-node"),".   Reusable diffusion will allow us to\nsupport both ",(0,n.kt)("inlineCode",{parentName:"p"},"cardano-node")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"mithril-node")," in the future. We are\npleased to say that we are running a ",(0,n.kt)("inlineCode",{parentName:"p"},"cardano-node")," that uses\nrefactored diffusion. See:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/discussions/4987#discussioncomment-11026976"},"design notes")),(0,n.kt)("li",{parentName:"ul"},"issue: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/issues/4929"},"ouroboros-network#4929"))),(0,n.kt)("h3",{id:"tx-submission-logic"},"Tx-Submission Logic"),(0,n.kt)("p",null,"We had a discussion with the consensus team (Karl Knutsson ",(0,n.kt)("a",{parentName:"p",href:"https://cardanofoundation.org/"},"CF"),", Nick Frisby\n",(0,n.kt)("a",{parentName:"p",href:"https://www.tweag.io/"},"Tweag"),") on network requirements for ",(0,n.kt)("inlineCode",{parentName:"p"},"tx-mempool"),". See:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"issue: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/issues/3311"},"ouroboros-network#3311")),(0,n.kt)("li",{parentName:"ul"},"pr: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/4887"},"ouroboros-network#4887")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/4984"},"ouroboros-network#4984")," (Karl's changes on top of ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/4887"},"ouroboros-network#4887"),")")),(0,n.kt)("h3",{id:"srv-record-support"},"SRV record support"),(0,n.kt)("p",null,"We continued working on the SRV support, see:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"issue: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/issues/2883"},"ouroboros-network#2883")),(0,n.kt)("li",{parentName:"ul"},"pr: ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/issues/5018"},"ouroboros-network#5018"))),(0,n.kt)("h3",{id:"technical-debt"},"Technical Debt"),(0,n.kt)("p",null,"We renamed some of the test modules to be more consistent across various\nnetwork components, see ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/issues/5028"},"ouroboros-network#5028"),"."))}d.isMDXComponent=!0}}]);