"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[28476],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return r?n.createElement(h,a(a({ref:t},u),{},{components:r})):n.createElement(h,a({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},17546:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const i={title:"Network Team Update",slug:"2025-03-19-network",authors:["coot"],tags:["network"],hide_table_of_contents:!1},a=void 0,l={permalink:"/2025-03-19-network",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/blog/2025-03-19-network.md",source:"@site/blog/2025-03-19-network.md",title:"Network Team Update",description:"Overview of sprint 83",date:"2025-03-19T00:00:00.000Z",formattedDate:"March 19, 2025",tags:[{label:"network",permalink:"/tags/network"}],readingTime:1.59,hasTruncateMarker:!1,authors:[{name:"Marcin Szamotulski",title:"Network Team Lead",url:"https://github.com/coot",imageURL:"https://github.com/coot.png",key:"coot"}],frontMatter:{title:"Network Team Update",slug:"2025-03-19-network",authors:["coot"],tags:["network"],hide_table_of_contents:!1},prevItem:{title:"Mithril Team Update",permalink:"/2025-03-19-mithril"},nextItem:{title:"Node API & CLI Team Update",permalink:"/2025-03-15-node-cli-api"}},s={authorsImageUrls:[void 0]},p=[{value:"Overview of sprint 83",id:"overview-of-sprint-83",level:2},{value:"High-level overview",id:"high-level-overview",level:3},{value:"SRV support (Cardano, Mithril)",id:"srv-support-cardano-mithril",level:4},{value:"Mithril",id:"mithril",level:4},{value:"Documentation",id:"documentation",level:4},{value:"Mux",id:"mux",level:4},{value:"Server-side performance considerations",id:"server-side-performance-considerations",level:4},{value:"Tx-Submission logic",id:"tx-submission-logic",level:4},{value:"Pull requests",id:"pull-requests",level:3},{value:"In review",id:"in-review",level:4},{value:"Work in Progress",id:"work-in-progress",level:4},{value:"Merged",id:"merged",level:4}],u={toc:p},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview-of-sprint-83"},"Overview of ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/orgs/IntersectMBO/projects/5/views/1?filterQuery=sprint%3A%22Sprint+83%22"},"sprint 83")),(0,o.kt)("h3",{id:"high-level-overview"},"High-level overview"),(0,o.kt)("h4",{id:"srv-support-cardano-mithril"},"SRV support (Cardano, Mithril)"),(0,o.kt)("p",null,"We merged ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5018"},"ouroboros-network#5018")," which adds support for SRV in ",(0,o.kt)("inlineCode",{parentName:"p"},"ouroboros-network"),".\nHowever, we still need to make a decision whether we require that all Cardano\nSRVs start with ",(0,o.kt)("inlineCode",{parentName:"p"},"_cardano._tcp"),", or we leave it open for the future.  The\nformer would allow us to use ",(0,o.kt)("inlineCode",{parentName:"p"},"SRV"),"s for different applications, e.g.\n",(0,o.kt)("inlineCode",{parentName:"p"},"_mithril._tcp")," for the mithril diffusion.  If that would be the case then we'd\nprepend ",(0,o.kt)("inlineCode",{parentName:"p"},"_cardano._tcp")," to what we find in the SRV field of a registration\ncertificate, e.g. prepend ",(0,o.kt)("inlineCode",{parentName:"p"},"_cardano._tcp")," by ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-node"),"'s diffusion, and\n",(0,o.kt)("inlineCode",{parentName:"p"},"_mithril._tcp")," by the mithril diffusion.  The other possibility is to extend\nthe registration certificate to include the addresses of mithril nodes."),(0,o.kt)("h4",{id:"mithril"},"Mithril"),(0,o.kt)("p",null,"We started working on a development plan for Mithril diffusion,\n","[ref][mithirl-diffusion]"," (note that this is a work in progress)."),(0,o.kt)("p",null,"We also have been working on moving network-related code from the\n",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-node")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-diffusion")," library in ",(0,o.kt)("inlineCode",{parentName:"p"},"ouroboros-network"),".  In the\nfuture, this will allow us to share parts of it in the Mithril diffusion ","[ouroboros-newtork#5082]","."),(0,o.kt)("h4",{id:"documentation"},"Documentation"),(0,o.kt)("p",null,"We improved our CDDL specifications by annotating which codecs require definite\n/ in-definite encoding of lists & maps, see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5089"},"ouroboros-network#5089"),"."),(0,o.kt)("h4",{id:"mux"},"Mux"),(0,o.kt)("p",null,"Karl Knutsson (",(0,o.kt)("a",{parentName:"p",href:"https://cardanofoundation.org/"},"CF"),") has been working on performance improvements in the\nmultiplexer (",(0,o.kt)("inlineCode",{parentName:"p"},"network-mux")," library), ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5093"},"ouroboros-network#5093"),"."),(0,o.kt)("h4",{id:"server-side-performance-considerations"},"Server-side performance considerations"),(0,o.kt)("p",null,"Karl Kntusson (",(0,o.kt)("a",{parentName:"p",href:"https://cardanofoundation.org/"},"CF"),") noticed a performance bottleneck in the responder\n(server) side of the p2p diffusion layer.  We've started working on addressing\nthis issue."),(0,o.kt)("h4",{id:"tx-submission-logic"},"Tx-Submission logic"),(0,o.kt)("p",null,"We continued reviewing/improving the ",(0,o.kt)("inlineCode",{parentName:"p"},"tx-submission")," PR ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/IntersectMBO/ouroboros-network/pull/4887"},"ouroboros-network#4887"),"."),(0,o.kt)("h3",{id:"pull-requests"},"Pull requests"),(0,o.kt)("h4",{id:"in-review"},"In review"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5093"},(0,o.kt)("strong",{parentName:"a"},"Mux performance improvements")))),(0,o.kt)("h4",{id:"work-in-progress"},"Work in Progress"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/4887"},(0,o.kt)("strong",{parentName:"a"},"TX Submission Logic"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5082"},(0,o.kt)("strong",{parentName:"a"},"cardano-diffusion sublibrary")))),(0,o.kt)("h4",{id:"merged"},"Merged"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5018"},(0,o.kt)("strong",{parentName:"a"},"SRV implementation"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5089"},(0,o.kt)("strong",{parentName:"a"},"CDDL: comment on definite and indefinite lists/maps"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5089"},(0,o.kt)("strong",{parentName:"a"},"LedgerPeers: code cleanup"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5091"},(0,o.kt)("strong",{parentName:"a"},"fixed a connection manager test failure"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/ouroboros-network/pull/5092"},(0,o.kt)("strong",{parentName:"a"},"Fixed LedgerPeers generators")))))}d.isMDXComponent=!0}}]);