"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[83167],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>N});var n=a(67294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var m=n.createContext({}),o=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},u=function(t){var e=o(t.components);return n.createElement(m.Provider,{value:e},t.children)},s="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,m=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),s=o(a),k=l,N=s["".concat(m,".").concat(k)]||s[k]||d[k]||r;return a?n.createElement(N,i(i({ref:e},u),{},{components:a})):n.createElement(N,i({ref:e},u))}));function N(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=k;var p={};for(var m in e)hasOwnProperty.call(e,m)&&(p[m]=e[m]);p.originalType=t,p[s]="string"==typeof t?t:l,i[1]=p;for(var o=2;o<r;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},86627:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>o});var n=a(87462),l=(a(67294),a(3905));const r={title:"Consensus Team Update",slug:"2022-08-31-consensus",authors:"dnadales",tags:["consensus"],hide_table_of_contents:!1},i=void 0,p={permalink:"/2022-08-31-consensus",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/blog/2022-08-31-consensus.md",source:"@site/blog/2022-08-31-consensus.md",title:"Consensus Team Update",description:"Executive summary",date:"2022-08-31T00:00:00.000Z",formattedDate:"August 31, 2022",tags:[{label:"consensus",permalink:"/tags/consensus"}],readingTime:8.925,hasTruncateMarker:!1,authors:[{name:"Damian Nadales",title:"Consensus Team Lead",url:"https://github.com/dnadales",imageURL:"https://github.com/dnadales.png",key:"dnadales"}],frontMatter:{title:"Consensus Team Update",slug:"2022-08-31-consensus",authors:"dnadales",tags:["consensus"],hide_table_of_contents:!1},prevItem:{title:"Ledger Team Update",permalink:"/2022-09-01-ledger"},nextItem:{title:"Network Team Update",permalink:"/2022-08-12-network"}},m={authorsImageUrls:[void 0]},o=[{value:"Executive summary",id:"executive-summary",level:2},{value:"Workstreams",id:"workstreams",level:2},{value:"Conway",id:"conway",level:3},{value:"UTxO HD",id:"utxo-hd",level:3},{value:"Only small rollbacks",id:"only-small-rollbacks",level:4},{value:"Genesis",id:"genesis",level:3},{value:"Technical debt",id:"technical-debt",level:3}],u={toc:o},s="wrapper";function d(t){let{components:e,...a}=t;return(0,l.kt)(s,(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"executive-summary"},"Executive summary"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We did most of the heavy lifting required to integrate the Conway era."),(0,l.kt)("li",{parentName:"ul"},"We have property tests for the UTxO HD backing store API implementations. A\npossible bug was identified. Work is ongoing to make sure the property-tests\ncover all the relevant cases."),(0,l.kt)("li",{parentName:"ul"},'We implemented and benchmarked the "anti-diff" prototype to speed up the UTxO\nHD functionality. Results show a rough speedup of ',(0,l.kt)("inlineCode",{parentName:"li"},"4x")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"5.5x")," across\nseveral scenarios. Note that: ",(0,l.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/tasty-bench-0.3.2/docs/Test-Tasty-Bench.html"},'"Data reported by ',(0,l.kt)("inlineCode",{parentName:"a"},"tasty-bench"),' is only of\nindicative and comparative significance."'),'.\nWe are investigating additional performance improvements. The "anti-diff"\nprototype and benchmarks are still pending code review.'),(0,l.kt)("li",{parentName:"ul"},"We elaborated a draft specification for the Genesis implementation and\n",(0,l.kt)("inlineCode",{parentName:"li"},"ChainSync")," jumping optimization.")),(0,l.kt)("h2",{id:"workstreams"},"Workstreams"),(0,l.kt)("h3",{id:"conway"},"Conway"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Integration PR of the minimal Conway era (",(0,l.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/issues/3962"},"Issue #3963"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/pull/3971"},"PR\n#3971"),")."),(0,l.kt)("li",{parentName:"ul"},"Discussions with Ledger revealed possible sources of confusion about which\ndata should be changed in the Conway era. As a result, a new technical debt\nissue was raised, which does not block the integration of the Conway era\n(",(0,l.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/issues/3976"},"Issue #3976"),").")),(0,l.kt)("h3",{id:"utxo-hd"},"UTxO HD"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/ouroboros-network/issues/3954"},"Issue #3954"),", ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/ouroboros-network/tree/jdral/3954-backingstore-property-tests"},"branch"),": The functionality of a\nbacking store, which is the interface to the on-disk part of ledger state in\nUTxO-HD, is tested at a high level through the ",(0,l.kt)("inlineCode",{parentName:"p"},"OnDisk")," tests. However, some\nfunctionalities remain untested, e.g., reads of ranges of keys. As such, we\nhave implemented ",(0,l.kt)("inlineCode",{parentName:"p"},"quickcheck-state-machine")," tests that exercise backing stores\ndirectly. The tests are reusable for different backing store implementations\nbecause the tests are implementation-agnostic: Any backing store that conforms\nto the backing store interface can be plugged into the tests. Work is still\nongoing to label/monitor the tests, such that we can verify that interesting\ncases are being tested. Furthermore, a possible bug has been identified in the\nLMDB backing store with respect to range reads, though the bug has not been\nresolved yet.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/ouroboros-network/issues/3946"},"Issue #3946"),", ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/ouroboros-network/tree/jdral/CAD-4199-prototype-anti-diffs"},"branch"),", ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/ouroboros-network/pull/3882"},"PR #3882"),': The\n"anti-diff" prototype proposes an alternative approach to keeping track of\nsequences (more specifically, ',(0,l.kt)("inlineCode",{parentName:"p"},"FingerTree"),'s) of diffs. These diff sequences\nare a component of the in-memory parts of the ledger state in UTxO-HD. Since\nthe consensus code often requires the cumulative diff of a sequence of diffs,\nthe current implementation "caches" cumulative diffs of each subtree in the\ndiff sequence. This caching allows relatively fast reconstruction of the total\ncumulative diff, but this caching proved to incur a non-negligible cost: when\nwe manipulate diff sequences through splits and appends, we force re-computing\na logarithmic number of caches. This is problematic, since we often split and\nappend in consensus: we split when we flush diffs to a backing store or when\nwe roll back blocks, and we append when pushing blocks. The new approach\nshould reduce the overhead of this caching.'),(0,l.kt)("p",{parentName:"li"},'We implemented micro-benchmarks for the "anti-diff" prototype: we\nfirst generate a sequence of commands (',(0,l.kt)("inlineCode",{parentName:"p"},"Forward"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Push"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Flush"),", or\n",(0,l.kt)("inlineCode",{parentName:"p"},"Rollback"),") through a simulation, after which we measure the performance of\napplying the commands to a diff sequence. In this context, ",(0,l.kt)("inlineCode",{parentName:"p"},"Forward")," means\nforwarding of values through a diff, whereas ",(0,l.kt)("inlineCode",{parentName:"p"},"Rollback"),' means switching to\na different fork by rolling back diffs/blocks and pushing new ones.\nMoreover, we compare the performance for the two implementations: the\n"legacy" approach, and the anti-diff approach.'),(0,l.kt)("p",{parentName:"li"},"Some preliminary results were positive, but we needed to revisit the\nbenchmark's configuration to obtain more definitive results. After a\ndiscussion with @dcoutts and the consensus team about this configuration\n(e.g., number of commands generated, choice of the security parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"k"),"),\nthe benchmarks should now be closer to the realistic setting. The following\nconfiguration specifies the default configuration that is used in the\nbenchmarking code:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Number of commands generated: ",(0,l.kt)("inlineCode",{parentName:"li"},"10_000")),(0,l.kt)("li",{parentName:"ul"},"Security parameter ",(0,l.kt)("inlineCode",{parentName:"li"},"k"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"2160")),(0,l.kt)("li",{parentName:"ul"},"Number of initial backing values: ",(0,l.kt)("inlineCode",{parentName:"li"},"100")),(0,l.kt)("li",{parentName:"ul"},"Number of key-value pairs deleted by a push: ",(0,l.kt)("inlineCode",{parentName:"li"},"50")),(0,l.kt)("li",{parentName:"ul"},"Number of key-value pairs inserted by a push: ",(0,l.kt)("inlineCode",{parentName:"li"},"50")),(0,l.kt)("li",{parentName:"ul"},"Number of key-value pairs forwarded by a forward: ",(0,l.kt)("inlineCode",{parentName:"li"},"50")),(0,l.kt)("li",{parentName:"ul"},"Probability of a large (in the range ",(0,l.kt)("inlineCode",{parentName:"li"},"[1000, 2000]"),") rollback: ",(0,l.kt)("inlineCode",{parentName:"li"},"0.05")),(0,l.kt)("li",{parentName:"ul"},"Probability of a small (in the range ",(0,l.kt)("inlineCode",{parentName:"li"},"[1, 10]"),") rollback: ",(0,l.kt)("inlineCode",{parentName:"li"},"0.95")),(0,l.kt)("li",{parentName:"ul"},"Order of commands:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"An equal number of forward and pushes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1")," flush every ",(0,l.kt)("inlineCode",{parentName:"li"},"10")," pushes."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1")," rollback every ",(0,l.kt)("inlineCode",{parentName:"li"},"100")," pushes")))),(0,l.kt)("p",{parentName:"li"},"Moreover, we run four benchmark scenarios:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Default configuration"),(0,l.kt)("li",{parentName:"ul"},"Without rollbacks"),(0,l.kt)("li",{parentName:"ul"},"With only small rollbacks"),(0,l.kt)("li",{parentName:"ul"},"Without rollbacks, larger flushes (",(0,l.kt)("inlineCode",{parentName:"li"},"1")," flush every ",(0,l.kt)("inlineCode",{parentName:"li"},"100")," pushes)")),(0,l.kt)("h3",{parentName:"li",id:"how-to-read-results"},"How to read results"),(0,l.kt)("p",{parentName:"li"},"Note: this section uses documentation from the\n",(0,l.kt)("a",{parentName:"p",href:"https://hackage.haskell.org/package/tasty-bench"},"tasty-bench")," package to\nexplain how to read the results of running our benchmarks."),(0,l.kt)("p",{parentName:"li"},"Running a benchmark scenario gives us the following (curated) output:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-text"},"...\nAntiDiff:                               OK (18.27s)\n  2.527 s \xb1  47 ms, 2.1 GB allocated, 544 MB copied, 2.2 GB peak memory, 0.23x\nLegacyDiff:                             OK (32.73s)\n  10.829 s \xb1 148 ms, 6.8 GB allocated, 2.3 GB copied, 2.2 GB peak memory\n...\n")),(0,l.kt)("p",{parentName:"li"},"The output says that the first benchmark, which exercises the anti-diff\nprototype, was repeatedly executed for ",(0,l.kt)("inlineCode",{parentName:"p"},"18.27")," seconds (wall-clock time),\nits predicted mean CPU time was ",(0,l.kt)("inlineCode",{parentName:"p"},"2.527")," seconds and means of individual\nsamples do not often diverge from it further than ",(0,l.kt)("inlineCode",{parentName:"p"},"\xb1 47")," milliseconds\n(double standard deviation). We also configure the RTS to collect GC\nstatistics, which enables ",(0,l.kt)("inlineCode",{parentName:"p"},"tasty-bench")," to estimate and report memory usage.\nThis data is reported as per ",(0,l.kt)("inlineCode",{parentName:"p"},"RTSStats")," fields: ",(0,l.kt)("inlineCode",{parentName:"p"},"allocated_bytes"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"copied_bytes")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"max_mem_in_use_bytes"),". So, the output of the first\nbenchmark says that a total of ",(0,l.kt)("inlineCode",{parentName:"p"},"2.1 GB")," of memory was allocated, that a\ntotal of ",(0,l.kt)("inlineCode",{parentName:"p"},"544 MB")," of memory were copied, and that the peak memory in usage\nwas ",(0,l.kt)("inlineCode",{parentName:"p"},"2.2 GB"),". We read the output for the second benchmark in the same way."),(0,l.kt)("p",{parentName:"li"},"Furthermore, the benchmark compares the mean CPU times for\nboth the anti-diff and legacy approaches: In this case, the mean CPU time\nfor the anti-diff approach is ",(0,l.kt)("inlineCode",{parentName:"p"},"~0.23x")," the mean CPU time for the legacy\napproach. Conversely, the mean CPU time for the legacy approach is\n",(0,l.kt)("inlineCode",{parentName:"p"},"1 / 0.23 ~= 4.35x")," the mean CPU time for the anti-diff approach. We will\ncall ",(0,l.kt)("inlineCode",{parentName:"p"},"0.23x")," the ",(0,l.kt)("em",{parentName:"p"},"improvement factor"),". We will call ",(0,l.kt)("inlineCode",{parentName:"p"},"4.35x")," the ",(0,l.kt)("em",{parentName:"p"},"speedup"),"."),(0,l.kt)("p",{parentName:"li"},"Note that these improvement factors (and reported results) are subject to\nnoise, randomness, the specific configuration parameters, and the whims\nof statistics. Data reported by ",(0,l.kt)("inlineCode",{parentName:"p"},"tasty-bench")," is only of indicative and\ncomparative significance."),(0,l.kt)("h3",{parentName:"li",id:"results"},"Results"),(0,l.kt)("p",{parentName:"li"},"For each of the 4 scenarios, we list the results of running the anti-diff and\nlegacy approaches 5 times. We run the benchmarks 5 times to get an indication\nof whether the results are similar across multiple runs. Furthermore, we\ncalculate the accompanying ",(0,l.kt)("em",{parentName:"p"},"ranges")," (if applicable) of improvement factors and\nspeedups."),(0,l.kt)("p",{parentName:"li"},"Note also the decrease in total bytes allocated and total bytes copied for\nthe anti-diff approach compared to the legacy approach."),(0,l.kt)("h4",{parentName:"li",id:"default-configuration"},"Default configuration"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Mean CPU time"),(0,l.kt)("th",{parentName:"tr",align:null},"2*Stdev (CPU time)"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes allocated"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes copied"),(0,l.kt)("th",{parentName:"tr",align:null},"Peak memory"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"2.533 s (0.23x)"),(0,l.kt)("td",{parentName:"tr",align:null},"4.7 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"2.1 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"557 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"10.792 s"),(0,l.kt)("td",{parentName:"tr",align:null},"162 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"6.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.3 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"2.508 s (0.23x)"),(0,l.kt)("td",{parentName:"tr",align:null},"245 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"2.1 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"515 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"10.850 s"),(0,l.kt)("td",{parentName:"tr",align:null},"30 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"6.9 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.3 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"2.562 s (0.23x)"),(0,l.kt)("td",{parentName:"tr",align:null},"5.0 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"2.1 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"552 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"10.993 s"),(0,l.kt)("td",{parentName:"tr",align:null},"149 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"6.9 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.3 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"2.168 s (0.22x)"),(0,l.kt)("td",{parentName:"tr",align:null},"5.3 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"434 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"9.976 s"),(0,l.kt)("td",{parentName:"tr",align:null},"39 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"6.3 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"2.527 s (0.23x)"),(0,l.kt)("td",{parentName:"tr",align:null},"47 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"2.1 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"544 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"10.829 s"),(0,l.kt)("td",{parentName:"tr",align:null},"148 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"6.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.3 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")))),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Improvement factor: ",(0,l.kt)("inlineCode",{parentName:"li"},"[0.22, 0.23]")),(0,l.kt)("li",{parentName:"ul"},"Speedup : ",(0,l.kt)("inlineCode",{parentName:"li"},"[1 / 0.23 ~= 4.35, 1 / 0.22 ~= 4.55]"))),(0,l.kt)("h4",{parentName:"li",id:"no-rollbacks"},"No rollbacks"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Mean CPU time"),(0,l.kt)("th",{parentName:"tr",align:null},"2*Stdev (CPU time)"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes allocated"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes copied"),(0,l.kt)("th",{parentName:"tr",align:null},"Peak memory"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.638 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"36 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"181 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.656 s"),(0,l.kt)("td",{parentName:"tr",align:null},"207 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.7 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.638 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"75 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"181 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.654 s"),(0,l.kt)("td",{parentName:"tr",align:null},"322 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.7 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.663 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"74 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"181 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.799 s"),(0,l.kt)("td",{parentName:"tr",align:null},"216 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.7 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.645 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"51 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"181 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.732 s"),(0,l.kt)("td",{parentName:"tr",align:null},"261 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.7 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.639 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"19 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"181 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.653 s"),(0,l.kt)("td",{parentName:"tr",align:null},"234 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.7 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")))),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Improvement factor: ",(0,l.kt)("inlineCode",{parentName:"li"},"0.19")),(0,l.kt)("li",{parentName:"ul"},"Speedup : ",(0,l.kt)("inlineCode",{parentName:"li"},"1 / 0.19 ~= 5.25"))))),(0,l.kt)("h4",{id:"only-small-rollbacks"},"Only small rollbacks"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Mean CPU time"),(0,l.kt)("th",{parentName:"tr",align:null},"2*Stdev (CPU time)"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes allocated"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes copied"),(0,l.kt)("th",{parentName:"tr",align:null},"Peak memory"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.833 s (0.18x)"),(0,l.kt)("td",{parentName:"tr",align:null},"36 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"185 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"10.362 s"),(0,l.kt)("td",{parentName:"tr",align:null},"867 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.6 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.696 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"30 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"185 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.822 s"),(0,l.kt)("td",{parentName:"tr",align:null},"106 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.702 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"44 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"186 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.906 s"),(0,l.kt)("td",{parentName:"tr",align:null},"147 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.701 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"47 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"185 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.949 s"),(0,l.kt)("td",{parentName:"tr",align:null},"197 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.677 s (0.19x)"),(0,l.kt)("td",{parentName:"tr",align:null},"55 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"186 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"8.856 s"),(0,l.kt)("td",{parentName:"tr",align:null},"177 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"5.8 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Improvement factor: ",(0,l.kt)("inlineCode",{parentName:"p"},"[0.18, 0.19]"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Speedup : ",(0,l.kt)("inlineCode",{parentName:"p"},"[1 / 0.19 ~= 5.25, 1 / 0.18 ~= 5.55]")),(0,l.kt)("h4",{parentName:"li",id:"no-rollbacks-larger-flushes-every-100-pushes"},"No rollbacks, larger flushes (every 100 pushes)"),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Mean CPU time"),(0,l.kt)("th",{parentName:"tr",align:null},"2*Stdev (CPU time)"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes allocated"),(0,l.kt)("th",{parentName:"tr",align:null},"Total bytes copied"),(0,l.kt)("th",{parentName:"tr",align:null},"Peak memory"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.643 s (0.25x)"),(0,l.kt)("td",{parentName:"tr",align:null},"21 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"196 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 1: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"6.591 s"),(0,l.kt)("td",{parentName:"tr",align:null},"351 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"4.0 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.4 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.616 s (0.25x)"),(0,l.kt)("td",{parentName:"tr",align:null},"47 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"196 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 2: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"6.520 s"),(0,l.kt)("td",{parentName:"tr",align:null},"232 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"4.0 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.640 s (0.25x)"),(0,l.kt)("td",{parentName:"tr",align:null},"34 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"196 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 3: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"6.540 s"),(0,l.kt)("td",{parentName:"tr",align:null},"150 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"4.0 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.635 s (0.25x)"),(0,l.kt)("td",{parentName:"tr",align:null},"76 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"196 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 4: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"6.589 s"),(0,l.kt)("td",{parentName:"tr",align:null},"131 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"4.0 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.0 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: AntiDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"1.628 s (0.25x)"),(0,l.kt)("td",{parentName:"tr",align:null},"19 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"1.5 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"196 MB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Run 5: LegacyDiff"),(0,l.kt)("td",{parentName:"tr",align:null},"6.490 s"),(0,l.kt)("td",{parentName:"tr",align:null},"5.9 ms"),(0,l.kt)("td",{parentName:"tr",align:null},"4.0 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"1.4 GB"),(0,l.kt)("td",{parentName:"tr",align:null},"2.2 GB"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Improvement factor: ",(0,l.kt)("inlineCode",{parentName:"p"},"0.25"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Speedup : ",(0,l.kt)("inlineCode",{parentName:"p"},"1 / 0.25 ~= 4")))),(0,l.kt)("h3",{id:"genesis"},"Genesis"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We elaborated a draft of the specification of the Genesis implementation and\nthe ChainSync Jumping optimization. In particular, this includes a proof\nsketch that the latter preserves liveness and safety in all cases (",(0,l.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/issues/3964"},"Issue\n3964"),").",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"@nfrisby's main realization during this sprint was that he had been\nfocusing so far on the case where the selected chain is an extension of\nthe intersection of our peers' ChainSync candidates."),(0,l.kt)("li",{parentName:"ul"},'This is the main case, ie an "absorbing" state, but it\'s not the only\ncase.'),(0,l.kt)("li",{parentName:"ul"},"The new proof sketch begins by case splitting on that predicate, and\nthat made the sketch quite a bit easier to follow."))),(0,l.kt)("li",{parentName:"ul"},'We continued working on the "happy path" ',(0,l.kt)("inlineCode",{parentName:"li"},"ChainSync")," Jumping prototype (",(0,l.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/issues/3960"},"Issue\n3960"),").")),(0,l.kt)("h3",{id:"technical-debt"},"Technical debt"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"We started working on the issues required to re-enable nightly CI runs..\nNightly CI runs have far more lax time constraints, which gives the option to\nrun significantly more property tests than in our regular CI. To this end, we\nmerged a PR to easily adapt the number of tests globally (",(0,l.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/pull/3947"},"PR\n#3947"),").")))}d.isMDXComponent=!0}}]);