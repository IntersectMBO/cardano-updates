"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[57899],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66636:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"Benchmarking -- Node 10.5.0",slug:"2025-07-performance-10.5.0",authors:"mgmeier",tags:["benchmarking-reports"],hide_table_of_contents:!1},i=void 0,l={permalink:"/reports/2025-07-performance-10.5.0",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/reports/2025-07-performance-10.5.0.md",source:"@site/reports/2025-07-performance-10.5.0.md",title:"Benchmarking -- Node 10.5.0",description:"Setup",date:"2025-07-02T09:50:10.000Z",formattedDate:"July 2, 2025",tags:[{label:"benchmarking-reports",permalink:"/reports/tags/benchmarking-reports"}],readingTime:3.35,hasTruncateMarker:!1,authors:[{name:"Michael Karg",title:"Performance and Tracing Team Lead",url:"https://github.com/mgmeier",imageURL:"https://github.com/mgmeier.png",key:"mgmeier"}],frontMatter:{title:"Benchmarking -- Node 10.5.0",slug:"2025-07-performance-10.5.0",authors:"mgmeier",tags:["benchmarking-reports"],hide_table_of_contents:!1},nextItem:{title:"Benchmarking -- Node 10.4.1",permalink:"/reports/2025-05-performance-10.4.1"}},s={authorsImageUrls:[void 0]},p=[{value:"Setup",id:"setup",level:2},{value:"Preliminaries",id:"preliminaries",level:2},{value:"Observations",id:"observations",level:2},{value:"Resource Usage",id:"resource-usage",level:3},{value:"Forging Loop",id:"forging-loop",level:3},{value:"Peer propagation",id:"peer-propagation",level:3},{value:"End-to-end propagation",id:"end-to-end-propagation",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Attachments",id:"attachments",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(m,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"As part of the release benchmarking cycle, we're comparing benchmarking runs for 2 different versions of ",(0,a.kt)("inlineCode",{parentName:"p"},"cardano-node"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1")," - baseline from the previous Node release"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"10.5.0")," - the current (pre-)release tag")),(0,a.kt)("p",null,"For this benchmark, we're gathering various metrics under 2 different workloads:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"value-only"),": Each transaction consumes 2 inputs and creates 2 outputs, changing the UTxO set. This workload produces full blocks (> 80kB) exclusively."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Plutus"),": Each transaction contains a Plutus script exhausting the per-tx execution budget. This workload produces small blocks (< 3kB) exclusively.")),(0,a.kt)("p",null,"Benchmarking is performed on a cluster of 52 block producing nodes spread across 3 different AWS regions, interconnected using a static, restricted topology. All runs\nwere performed in the Conway era.  "),(0,a.kt)("h2",{id:"preliminaries"},"Preliminaries"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The feature in ",(0,a.kt)("inlineCode",{parentName:"li"},"10.5")," with major performance impact is periodic ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/cardano-node/pull/6180"},"ledger metrics"),". This is exclusive to the ",(0,a.kt)("a",{parentName:"li",href:"https://developers.cardano.org/docs/get-started/cardano-node/new-tracing-system/new-tracing-system"},"new tracing system"),"."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"10.5")," flips the default config for ",(0,a.kt)("inlineCode",{parentName:"li"},"PeerSharing")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),"; however, the recommendation is to explicitly set it to ",(0,a.kt)("inlineCode",{parentName:"li"},"false")," on block producers. If not for privacy issues alone, we also found disadvantageous performance impact on block production when enabled. Hence, our benchmarks do not factor in that overhead.")),(0,a.kt)("h2",{id:"observations"},"Observations"),(0,a.kt)("p",null,"These benchmarks are about evaluating specific corner cases in a constrained environment that allows for reliable reproduction of results; they're not trying to directly recreate the operational conditions on Mainnet.  "),(0,a.kt)("h3",{id:"resource-usage"},"Resource Usage"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"10.5.0")," shows a clear reduction in CPU usage - by ~30% regardless of workload type."),(0,a.kt)("li",{parentName:"ol"},"Furthermore, Allocation rate and GC impact are clearly reduced - by 27%-29% and 24%-25% respectively."),(0,a.kt)("li",{parentName:"ol"},"Heap size ",(0,a.kt)("em",{parentName:"li"},"increases")," very slightly under saturation (by 1%) and ",(0,a.kt)("em",{parentName:"li"},"decreases")," very slightly (by 1%) under Plutus workload."),(0,a.kt)("li",{parentName:"ol"},"CPU 85% spans are slightly ",(0,a.kt)("em",{parentName:"li"},"shorter")," (~0.2 slots) under saturation, and slightly ",(0,a.kt)("em",{parentName:"li"},"longer")," (~0.26 slots) under Plutus workload.")),(0,a.kt)("p",null,"Caveat: Individual metrics can't be evaluated in isolate; the resource usage profile as a whole provides insight into the system's performance and responsiveness."),(0,a.kt)("h3",{id:"forging-loop"},"Forging Loop"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Block Context Acquisition time (prior to leadership check) is greatly reduced - from ~24ms to under 1ms."),(0,a.kt)("li",{parentName:"ol"},"Under saturation only, Ledger Ticking and Mempool Snapshotting exhibit very slight upticks (by 3ms and 2ms respectively)."),(0,a.kt)("li",{parentName:"ol"},"Under Plutus workload only, Self Adoption on the forger exhibits a very slight uptick (by 3ms)."),(0,a.kt)("li",{parentName:"ol"},"In summary, a block producer is able to announce a new header 20ms or 21% earlier into the slot (22ms or 43% under Plutus workload).")),(0,a.kt)("p",null,"The metric ",(0,a.kt)("em",{parentName:"p"},"'Slot start to announced'")," (see in attachments) is cumulative, and demonstrates how far into a slot the block producing node first announces the new header."),(0,a.kt)("h3",{id:"peer-propagation"},"Peer propagation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Under saturation workload only, Block Fetch duration increases by 14ms (or 4%)."),(0,a.kt)("li",{parentName:"ol"},"Under saturation, block adoption is slightly ",(0,a.kt)("em",{parentName:"li"},"faster")," (by 3ms), while under Plutus workload it's slightly ",(0,a.kt)("em",{parentName:"li"},"slower")," (by 2ms).")),(0,a.kt)("h3",{id:"end-to-end-propagation"},"End-to-end propagation"),(0,a.kt)("p",null,"This metric encompasses block diffusion and adoption across specific percentages of the benchmarking cluster, with 0.80 adoption meaning adoption on 80% of all cluster nodes.  "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Under saturation workload, cluster adoption times on ",(0,a.kt)("inlineCode",{parentName:"li"},"10.5.0")," are identical to those on ",(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1"),"."),(0,a.kt)("li",{parentName:"ol"},"Under Plutus workload, they show a moderate 3% - 5% ",(0,a.kt)("em",{parentName:"li"},"improvement"),", with 7% in the 50th percentile.")),(0,a.kt)("h3",{id:"conclusion"},"Conclusion"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We could not detect any regressions or performance risks to the network on ",(0,a.kt)("inlineCode",{parentName:"li"},"10.5.0"),"."),(0,a.kt)("li",{parentName:"ol"},"CPU usage is clearly reduced."),(0,a.kt)("li",{parentName:"ol"},"The forging loop executes faster, new header announcements happen earlier."),(0,a.kt)("li",{parentName:"ol"},"Diffusion / adoption metrics exhibit a small overall improvement and indicate ",(0,a.kt)("inlineCode",{parentName:"li"},"10.5.0")," will deliver network performance at least comparable to ",(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1"),"."),(0,a.kt)("li",{parentName:"ol"},"All improvements listed above hinge on the ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/cardano-node/pull/6180"},"ledger metrics")," feature and will materialize only when using the ",(0,a.kt)("a",{parentName:"li",href:"https://developers.cardano.org/docs/get-started/cardano-node/new-tracing-system/new-tracing-system"},"new tracing system"),". Using the legacy system, ",(0,a.kt)("inlineCode",{parentName:"li"},"10.5.0")," performance is expected to be almost identical to ",(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1"),".")),(0,a.kt)("h2",{id:"attachments"},"Attachments"),(0,a.kt)("p",null,"Full comparison for ",(0,a.kt)("em",{parentName:"p"},"value-only workload"),", PDF downloadable ",(0,a.kt)("a",{target:"_blank",href:n(76110).Z},"here"),"."),(0,a.kt)("p",null,"Full comparison for ",(0,a.kt)("em",{parentName:"p"},"Plutus workload"),", PDF downloadable ",(0,a.kt)("a",{target:"_blank",href:n(17324).Z},"here"),".  "),(0,a.kt)("p",null,"NB. The benchmarks for ",(0,a.kt)("inlineCode",{parentName:"p"},"10.5.0")," extend to a potential ",(0,a.kt)("inlineCode",{parentName:"p"},"10.5.1")," tag, as that won't include any changes with a performance impact; thus, measurements performed on ",(0,a.kt)("inlineCode",{parentName:"p"},"10.5.0")," remain valid."))}d.isMDXComponent=!0},17324:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/release-10.5.0.plutus-8be2a58dd7bc67d41af6254b47ce4a58.pdf"},76110:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/release-10.5.0.value-only-c886a172ada813c722a3e366f9a8ff46.pdf"}}]);