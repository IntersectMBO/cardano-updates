"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[1335],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var i=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=l,g=m["".concat(s,".").concat(d)]||m[d]||c[d]||a;return n?i.createElement(g,r(r({ref:t},p),{},{components:n})):i.createElement(g,r({ref:t},p))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:l,r[1]=o;for(var u=2;u<a;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},31806:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=n(87462),l=(n(67294),n(3905));const a={title:"Plutus Core Team Update",slug:"2025-04-16-plutus-core",authors:"zliu41",tags:["plutus-core"],hide_table_of_contents:!1},r=void 0,o={permalink:"/2025-04-16-plutus-core",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/blog/2025-04-16-plutus-core.md",source:"@site/blog/2025-04-16-plutus-core.md",title:"Plutus Core Team Update",description:"High level summary",date:"2025-04-16T00:00:00.000Z",formattedDate:"April 16, 2025",tags:[{label:"plutus-core",permalink:"/tags/plutus-core"}],readingTime:1.865,hasTruncateMarker:!1,authors:[{name:"Ziyang Liu",title:"Software Engineering Lead",url:"https://github.com/zliu41",imageURL:"https://github.com/zliu41.png",key:"zliu41"}],frontMatter:{title:"Plutus Core Team Update",slug:"2025-04-16-plutus-core",authors:"zliu41",tags:["plutus-core"],hide_table_of_contents:!1},prevItem:{title:"Mithril Team Update",permalink:"/2025-04-16-mithril"},nextItem:{title:"Network Team Update",permalink:"/2025-04-15-network"}},s={authorsImageUrls:[void 0]},u=[{value:"High level summary",id:"high-level-summary",level:2},{value:"Low level summary",id:"low-level-summary",level:2},{value:"Key Pull Requests Merged",id:"key-pull-requests-merged",level:3},{value:"Issues In Progress",id:"issues-in-progress",level:3}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"high-level-summary"},"High level summary"),(0,l.kt)("p",null,"We made significant improvements to Plinth (formerly Plutus Tx) in the past few weeks:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Plinth compiler improvements",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Added compiler flag ",(0,l.kt)("inlineCode",{parentName:"li"},"inline-callsite-growth"),", for setting the inlining threshold for callsites.\n0 disables inlining a binding at a callsite if it increases the AST size; ",(0,l.kt)("inlineCode",{parentName:"li"},"n")," allows inlining if the AST size grows by no more than ",(0,l.kt)("inlineCode",{parentName:"li"},"n"),".\nKeep in mind that oing so does not mean the final program will be bigger, since inlining can often unlock further optimizations."),(0,l.kt)("li",{parentName:"ul"},"PlutusTx.Lift.liftCode and related functions now apply the default PIR and UPLC optimizations during code lifting.\nThis could lead to significantly more efficient scripts when using lifting."))),(0,l.kt)("li",{parentName:"ul"},"Plinth library improvements",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Added module ",(0,l.kt)("inlineCode",{parentName:"li"},"PlutusTx.BuiltinList"),", containing functions for operating on ",(0,l.kt)("inlineCode",{parentName:"li"},"BuiltinList"),"."),(0,l.kt)("li",{parentName:"ul"},"Augmented module ",(0,l.kt)("inlineCode",{parentName:"li"},"PlutusTx.Data.List"),", adding more functions for operating on Data encoded ",(0,l.kt)("inlineCode",{parentName:"li"},"List"),".\nThis includes, among others, ",(0,l.kt)("inlineCode",{parentName:"li"},"PlutusTx.Data.List.destructList"),", which takes a list along with a list of desired indices, and generates variables bound to the elements at those indices, as well as ",(0,l.kt)("inlineCode",{parentName:"li"},"PlutusTx.Data.List.caseList")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"caseList'"),", for matching on ",(0,l.kt)("inlineCode",{parentName:"li"},"List"),"s."),(0,l.kt)("li",{parentName:"ul"},"Augmented module ",(0,l.kt)("inlineCode",{parentName:"li"},"PlutusTx.Data.AssocMap"),", adding more functions for operating on Data encoded ",(0,l.kt)("inlineCode",{parentName:"li"},"Map"),".")))),(0,l.kt)("p",null,"Additionally, we added two new pages to the Plinth user guide:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://plutus.cardano.intersectmbo.org/docs/using-plinth/lifting"},"Lifting Values into CompiledCode")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://plutus.cardano.intersectmbo.org/docs/working-with-scripts/compile-time-evaluation"},"Compile Time Evaluation"))),(0,l.kt)("p",null,"On the Plutus Core side, we made progress on features targeting the next Hard Fork.\nThis includes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"costing, conformance testing and metatheory for the ",(0,l.kt)("inlineCode",{parentName:"li"},"dropList")," primitive"),(0,l.kt)("li",{parentName:"ul"},"costing and metatheory of builtin arrays"),(0,l.kt)("li",{parentName:"ul"},"costing for the modular exponentiation primitive"),(0,l.kt)("li",{parentName:"ul"},"reviewing the CIP on builtin ",(0,l.kt)("inlineCode",{parentName:"li"},"Value")),(0,l.kt)("li",{parentName:"ul"},"investigating approaches for enabling casing on builtin types")),(0,l.kt)("p",null,"Regarding certified compilation, we worked on adding more tests to the certifier and resolving the issues it uncovered."),(0,l.kt)("h2",{id:"low-level-summary"},"Low level summary"),(0,l.kt)("h3",{id:"key-pull-requests-merged"},"Key Pull Requests Merged"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/7031"},"Add PlutusTx.BuiltinList module")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/7017"},"Metatheory for dropList")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/6974"},"Proper purity check for unsaturated builtins")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/6982"},"Introduce the inline-callsite-growth flag for setting inliner aggressiveness")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/6997"},"Add PlutusTx.Data.List.caseList and caseList'")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/6992"},"Add nil and singleton to PlutusTx.Data.List")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/6978"},"Run default PIR/UPLC optimizations during code lifting")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/pull/6945"},"Add PlutusTx.Data.List.destructList"))),(0,l.kt)("h3",{id:"issues-in-progress"},"Issues In Progress"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/IntersectMBO/plutus/issues/6602"},"Caseing on values of built-in types")),(0,l.kt)("li",{parentName:"ul"},"Costing for modular exponentiation (in plutus-private)"),(0,l.kt)("li",{parentName:"ul"},"Costing of builtin functions operating on builtin arrays (in plutus-private)"),(0,l.kt)("li",{parentName:"ul"},"Add negative certifier tests (in plutus-private)")))}c.isMDXComponent=!0}}]);