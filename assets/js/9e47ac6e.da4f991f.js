"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[45602],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,k=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"Benchmarking -- Node 10.4.1",slug:"2025-05-performance-10.4.1",authors:"mgmeier",tags:["benchmarking-reports"],hide_table_of_contents:!1},l=void 0,i={permalink:"/reports/2025-05-performance-10.4.1",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/reports/2025-05-performance-10.4.1.md",source:"@site/reports/2025-05-performance-10.4.1.md",title:"Benchmarking -- Node 10.4.1",description:"Setup",date:"2025-05-05T15:29:39.000Z",formattedDate:"May 5, 2025",tags:[{label:"benchmarking-reports",permalink:"/reports/tags/benchmarking-reports"}],readingTime:3.05,hasTruncateMarker:!1,authors:[{name:"Michael Karg",title:"Performance and Tracing Team Lead",url:"https://github.com/mgmeier",imageURL:"https://github.com/mgmeier.png",key:"mgmeier"}],frontMatter:{title:"Benchmarking -- Node 10.4.1",slug:"2025-05-performance-10.4.1",authors:"mgmeier",tags:["benchmarking-reports"],hide_table_of_contents:!1},prevItem:{title:"Benchmarking -- Node 10.5.0",permalink:"/reports/2025-07-performance-10.5.0"},nextItem:{title:"Benchmarking -- Node 10.3.1",permalink:"/reports/2025-04-performance-10.3.1"}},s={authorsImageUrls:[void 0]},p=[{value:"Setup",id:"setup",level:2},{value:"Observations",id:"observations",level:2},{value:"Resource Usage",id:"resource-usage",level:3},{value:"Forging Loop",id:"forging-loop",level:3},{value:"Peer propagation",id:"peer-propagation",level:3},{value:"End-to-end propagation",id:"end-to-end-propagation",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Attachments",id:"attachments",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"As part of the release benchmarking cycle, we're comparing benchmarking runs for 2 different versions of ",(0,a.kt)("inlineCode",{parentName:"p"},"cardano-node"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"10.3.1")," - baseline from the previous Node release"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1")," - the current release")),(0,a.kt)("p",null,"For this benchmark, we're gathering various metrics under 2 different workloads:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"value-only"),": Each transaction consumes 2 inputs and creates 2 outputs, changing the UTxO set. This workload produces full blocks (> 80kB) exclusively."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"Plutus"),": Each transaction contains a Plutus script exhausting the per-tx execution budget. This workload produces small blocks (< 3kB) exclusively.")),(0,a.kt)("p",null,"Benchmarking is performed on a cluster of 52 block producing nodes spread across 3 different AWS regions, interconnected using a static, restricted topology. All runs\nwere performed in the Conway era.  "),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"10.4.1")," features the UTxO-HD in-memory backing store ",(0,a.kt)("inlineCode",{parentName:"p"},"V2InMemory")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"LedgerDB"),", which replaces the in-memory representation of UTxO entries in ",(0,a.kt)("inlineCode",{parentName:"p"},"10.3")," and prior."),(0,a.kt)("h2",{id:"observations"},"Observations"),(0,a.kt)("p",null,"These benchmarks are about evaluating specific corner cases in a constrained environment that allows for reliable reproduction of results; they're not trying to directly recreate the operational conditions on Mainnet.  "),(0,a.kt)("h3",{id:"resource-usage"},"Resource Usage"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"On ",(0,a.kt)("inlineCode",{parentName:"li"},"10.4.0")," under value workload, Heap size increases slightly by 2%, and 5% under Plutus workload. This corresponds to using ~170MiB-390MiB additional RAM."),(0,a.kt)("li",{parentName:"ol"},"Allocation rate and GC impact are virtually unchanged."),(0,a.kt)("li",{parentName:"ol"},"Process CPU usage improves slightly by 2% regardless of workload type."),(0,a.kt)("li",{parentName:"ol"},"CPU 85% spans are slightly (~0.37 slots) ",(0,a.kt)("em",{parentName:"li"},"longer")," under value workload, and slightly ",(0,a.kt)("em",{parentName:"li"},"shorter")," (~0.33) under Plutus workload.")),(0,a.kt)("p",null,"Caveat: Individual metrics can't be evaluated in isolate; the resource usage profile as a whole provides insight into the system's performance and responsiveness."),(0,a.kt)("h3",{id:"forging-loop"},"Forging Loop"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We can observe a clear improvement in Mempool snapshotting by 9ms or 16% (2ms or 8% under Plutus workload)."),(0,a.kt)("li",{parentName:"ol"},"Self-Adoption time improves by 4ms or 5% (and remains virtually unchanged under Plutus workload)."),(0,a.kt)("li",{parentName:"ol"},"Hence a block producer is able to announce a new header 10ms or 9% earlier into the slot (1ms or 2% under Plutus workload).")),(0,a.kt)("p",null,"The metric ",(0,a.kt)("em",{parentName:"p"},"'Slot start to announced'")," (see in attachments) is cumulative, and demonstrates how far into a slot the block producing node first announces the new header."),(0,a.kt)("h3",{id:"peer-propagation"},"Peer propagation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Under value workload, Fetch duration and Fetched to Sending improve slightly by 3ms (1%) and 2ms (4%)."),(0,a.kt)("li",{parentName:"ol"},"Under Plutus workload, Fetched to Sending has a slightly longer delay - 2ms (or 5%).")),(0,a.kt)("h3",{id:"end-to-end-propagation"},"End-to-end propagation"),(0,a.kt)("p",null,"This metric encompasses block diffusion and adoption across specific percentages of the benchmarking cluster, with 0.80 adoption meaning adoption on 80% of all cluster nodes.  "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Under value workload, cluster adoption times exhibit a small 1% - 3% ",(0,a.kt)("em",{parentName:"li"},"improvement")," across all percentiles."),(0,a.kt)("li",{parentName:"ol"},"Under Plutus workload, they show a small 1% - 2% ",(0,a.kt)("em",{parentName:"li"},"increase")," across all percentiles (except the 80th).")),(0,a.kt)("h3",{id:"conclusion"},"Conclusion"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We could not detect any regressions or performance risks to the network on ",(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1"),"."),(0,a.kt)("li",{parentName:"ol"},"There is a small and reasonable price to pay in RAM usage for adding the ",(0,a.kt)("inlineCode",{parentName:"li"},"LedgerDB")," abstraction and thus enable exchangeable backing store implementations."),(0,a.kt)("li",{parentName:"ol"},"On the other hand, CPU usage is reduced slightly by use of the in-memory backing store."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1")," is beneficial in all cases for block production metrics; specifically, block producers will be able to announce new headers earlier into the slot."),(0,a.kt)("li",{parentName:"ol"},"Network diffusion and adoption metrics vary only slightly and indicate ",(0,a.kt)("inlineCode",{parentName:"li"},"10.4.1")," will deliver network performance comparable to ",(0,a.kt)("inlineCode",{parentName:"li"},"10.3.1"),".")),(0,a.kt)("h2",{id:"attachments"},"Attachments"),(0,a.kt)("p",null,"Full comparison for ",(0,a.kt)("em",{parentName:"p"},"value-only workload"),", PDF downloadable ",(0,a.kt)("a",{target:"_blank",href:n(62099).Z},"here"),"."),(0,a.kt)("p",null,"Full comparison for ",(0,a.kt)("em",{parentName:"p"},"Plutus workload"),", PDF downloadable ",(0,a.kt)("a",{target:"_blank",href:n(13945).Z},"here"),".  "),(0,a.kt)("p",null,"NB. The benchmarks for ",(0,a.kt)("inlineCode",{parentName:"p"},"10.4.1")," were performed on tag ",(0,a.kt)("inlineCode",{parentName:"p"},"10.4.0"),". The patch version bump did not include changes relevant to performance; thus, measurements performed on ",(0,a.kt)("inlineCode",{parentName:"p"},"10.4.0")," remain valid. The same holds for ",(0,a.kt)("inlineCode",{parentName:"p"},"10.3.1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"10.3.0"),"."))}m.isMDXComponent=!0},13945:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/release-10.4.1.plutus-1cf67914451f54090b7441b69fb5579a.pdf"},62099:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/release-10.4.1.value-only-d204944948caf9a791ebe994a60cc9dd.pdf"}}]);