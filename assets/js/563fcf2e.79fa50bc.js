"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[94560],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(a),c=r,m=d["".concat(p,".").concat(c)]||d[c]||h[c]||l;return a?n.createElement(m,i(i({ref:t},s),{},{components:a})):n.createElement(m,i({ref:t},s))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},54332:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const l={title:"Ledger Team Update",slug:"2023-01-05-ledger",authors:"JaredCorduan",tags:["ledger"],hide_table_of_contents:!1},i=void 0,o={permalink:"/2023-01-05-ledger",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/blog/2023-01-05-ledger.md",source:"@site/blog/2023-01-05-ledger.md",title:"Ledger Team Update",description:"High level summary",date:"2023-01-05T00:00:00.000Z",formattedDate:"January 5, 2023",tags:[{label:"ledger",permalink:"/tags/ledger"}],readingTime:4.44,hasTruncateMarker:!1,authors:[{name:"Jared Corduan",title:"Ledger Team Lead",url:"https://github.com/JaredCorduan",imageURL:"https://github.com/JaredCorduan.png",key:"JaredCorduan"}],frontMatter:{title:"Ledger Team Update",slug:"2023-01-05-ledger",authors:"JaredCorduan",tags:["ledger"],hide_table_of_contents:!1},prevItem:{title:"Crypto Team Update",permalink:"/2023-01-06-crypto"},nextItem:{title:"Node API & CLI Team Update",permalink:"/2022-12-28-node-cli-api"}},p={authorsImageUrls:[void 0]},u=[{value:"High level summary",id:"high-level-summary",level:2},{value:"Lower level summary",id:"lower-level-summary",level:2},{value:"Finishing the deposit tracking",id:"finishing-the-deposit-tracking",level:3},{value:"New Conway era transaction",id:"new-conway-era-transaction",level:3},{value:"Optimizing the <code>TICKF</code> transition",id:"optimizing-the-tickf-transition",level:3},{value:"Technical debt",id:"technical-debt",level:3},{value:"Improved ledger event",id:"improved-ledger-event",level:4},{value:"Improved type saftey",id:"improved-type-saftey",level:4},{value:"Code/Module organization",id:"codemodule-organization",level:4},{value:"Revert pointer address deprecation",id:"revert-pointer-address-deprecation",level:4},{value:"Miscellaneous",id:"miscellaneous",level:4}],s={toc:u},d="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"high-level-summary"},"High level summary"),(0,r.kt)("p",null,"The ledger team finished up the remaining work for tracking individual depots,\nbuilt out the new Conway era transaction body (in line with CIP-1694),\ngreatly reduce some problematically large calculations on the epoch boundary,\nand addressed technical debt."),(0,r.kt)("h2",{id:"lower-level-summary"},"Lower level summary"),(0,r.kt)("h3",{id:"finishing-the-deposit-tracking"},"Finishing the deposit tracking"),(0,r.kt)("p",null,"The initial work on the individual deposit tracking project focused only on correctness.\nAs this is a large data structure\n(since its size is linear with respect to the number of registered stake credentials),\nit is very important that we also reduce the memory overhead as much as possible.\nFortunately, we were able to add very little overhead for the deposits by using existing\nefficient data structures. The extra tracking now only incurs one word (8 bytes)\nper registered stake credential."),(0,r.kt)("p",null,"See:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3195"},"pull-3195")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3202"},"pull-3202")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3217"},"pull-3217"))),(0,r.kt)("h3",{id:"new-conway-era-transaction"},"New Conway era transaction"),(0,r.kt)("p",null,'We implemented the Conway era transaction body, which is in line with CIP-1694.\nNote that the Conway era implements, losing speaking, the parts of CIP-1694 that are not\nrelated to the liquid democracy (the "DReps").\nThe new transaction body adds the new governance actions and votes,\nwhile also deprecating the old governance structures\n(i.e. the old protocol parameter updates and MIR certificates).'),(0,r.kt)("p",null,"We also now have the wire specification (CDDL file) and serialization code in place.\nThe wire specification is still subject to change while we work on the Conway era,\nbut it is now usable and has proper testing support\n(so that, for example, the serialization round-trips, etc)."),(0,r.kt)("p",null,"See:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3176"},"pull-3176")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3226"},"pull-3226"))),(0,r.kt)("h3",{id:"optimizing-the-tickf-transition"},"Optimizing the ",(0,r.kt)("inlineCode",{parentName:"h3"},"TICKF")," transition"),(0,r.kt)("p",null,"Every since the release of the Shelley era, we have been working to reduce the computational load\nplaced on the node by the ledger at the epoch boundary.\nWhile still not perfect, we believe that we have removed one of the final problematically long\nepoch boundary computations that exacerbate situations like\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/cardano-node/issues/4421"},"this"),".\nIn particular, the problem involved the way in which the consensus layer obtains a view of the\nledger for the purposes of checking the leadership schedule in a new epoch.\nWe implemented a stopgap measure which now only incurs a single multi-second cost once per epoch\ninstead of potentially several multi-second costs while the networks waits for the first block\nof a new epoch to be minted."),(0,r.kt)("p",null,"See:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/blob/ea48d4815946c4f35239eb41815fe06cd6ffec2e/docs/adr/2022-12-12_007-optimize-ledger-view.md"},"ADR")," about the decision."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3209"},"pull-3209"))),(0,r.kt)("h3",{id:"technical-debt"},"Technical debt"),(0,r.kt)("p",null,"We closed the year out with a lot of reduction to the technical debt!"),(0,r.kt)("h4",{id:"improved-ledger-event"},"Improved ledger event"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3212"},"pull-3212")," - The ledger events are not guaranteed to appear in any given order within a block.\nFor this reason, motivated by the use case in db-sync, the ",(0,r.kt)("inlineCode",{parentName:"li"},"TotalDeposits")," event now\nincludes a transaction ID and emits the ",(0,r.kt)("em",{parentName:"li"},"change")," in deposits instead of the value.")),(0,r.kt)("h4",{id:"improved-type-saftey"},"Improved type saftey"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3208"},"pull-3208")," - We replaced ",(0,r.kt)("inlineCode",{parentName:"li"},"NominalDiffTime")," with a newtype wrapper. The problem was that our CBOR\nencoders and decoders were using the wrong level of precision, having to due with with\nthe Shelley genesis file. We removed the potential problem with a newtype wrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3167"},"pull-3167")," - We now use a GADT to ensure consistency of the Plutus language in the types\nfor ",(0,r.kt)("inlineCode",{parentName:"li"},"TransactionScriptFailure")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"PlutusDebug"),".")),(0,r.kt)("h4",{id:"codemodule-organization"},"Code/Module organization"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3175"},"pull-3175")," - The Allegra and Mary eras had an unusual relationship in our codebase,\ndue to the uncertainly of release dates while we were implementing them.\nIn particular, they were coupled in way that is different from the rest of the code base.\nWith hindsight on our side, we split the combined ",(0,r.kt)("inlineCode",{parentName:"li"},"shelley-ma")," Haskell package into two\nseparate ledger era packages, which is now consistent with the rest of the repository\nand module structure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3184"},"pull-3184")," - We created a core test sub-library, cleaning up a lot of our property test\ngenerator code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3210"},"pull-3210")," - We moved the ",(0,r.kt)("inlineCode",{parentName:"li"},"KeyPair")," type to the test library. Outside of testing,\nthe ledger does not need to deal with signing keys, and since this is a topic that\ndeserves the utmost care, it is best to make it clear that our use of signing keys\nis only for testing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3229"},"pull-3229")," - We split the ",(0,r.kt)("inlineCode",{parentName:"li"},"Cardano.Ledger.Alonzo.Data")," module, which is more consistent with the rest\nof the codebase.")),(0,r.kt)("h4",{id:"revert-pointer-address-deprecation"},"Revert pointer address deprecation"),(0,r.kt)("p",null,"Thanks to one of our excellent internal auditors,\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jmhrpr"},"@jmhrpr"),",\nwe now have a better plan for deprecating pointer addresses.\nThis meant that we had to revert the previous work to deprecate them."),(0,r.kt)("p",null,"See:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/issues/3161"},"issue-3161")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3215"},"pull-3215"))),(0,r.kt)("h4",{id:"miscellaneous"},"Miscellaneous"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3205"},"pull-3205")," - We removed deprecated type synonyms."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3218"},"pull-3218")," - We cleaned up the address deserialization."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3223"},"pull-3223")," - We fixed faulty address deserialization tests."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3222"},"pull-3222")," - We switched to a general type family ",(0,r.kt)("inlineCode",{parentName:"li"},"TxOut")," from concrete ones,\nreducing many constraints."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3224"},"pull-3224")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"ShelleyGenesis")," is now parameterized by crypto instead of by era."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3170"},"pull-3170")," - We set the cabal-version to 3.0 in our projects."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3172"},"pull-3172")," - We removed the now useless ",(0,r.kt)("inlineCode",{parentName:"li"},"EncodeMint"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"DecodeMint")," classes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/cardano-ledger/pull/3225"},"pull-3225")," - We switch from ",(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/ormolu"},"ormolu")," to\n",(0,r.kt)("a",{parentName:"li",href:"https://hackage.haskell.org/package/fourmolu"},"fourmolu"),".\nThe reason was to be able to finally have more diff friendly code!")))}h.isMDXComponent=!0}}]);