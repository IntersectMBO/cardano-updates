"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[51925],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>g});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=o,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(g,i(i({ref:t},p),{},{components:r})):n.createElement(g,i({ref:t},p))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4740:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={title:"Benchmarking -- UTxO-HD on 10.2",slug:"2025-02-performance-utxohd-10.2",authors:"mgmeier",tags:["benchmarking-reports"],hide_table_of_contents:!1},i=void 0,l={permalink:"/reports/2025-02-performance-utxohd-10.2",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/reports/2025-02-performance-utxohd-10.2.md",source:"@site/reports/2025-02-performance-utxohd-10.2.md",title:"Benchmarking -- UTxO-HD on 10.2",description:"Setup",date:"2025-02-21T17:25:57.000Z",formattedDate:"February 21, 2025",tags:[{label:"benchmarking-reports",permalink:"/reports/tags/benchmarking-reports"}],readingTime:2.305,hasTruncateMarker:!1,authors:[{name:"Michael Karg",title:"Performance and Tracing Team Lead",url:"https://github.com/mgmeier",imageURL:"https://github.com/mgmeier.png",key:"mgmeier"}],frontMatter:{title:"Benchmarking -- UTxO-HD on 10.2",slug:"2025-02-performance-utxohd-10.2",authors:"mgmeier",tags:["benchmarking-reports"],hide_table_of_contents:!1},prevItem:{title:"Memory Budget Scaling -- 10.3",permalink:"/reports/2025-05-execbudget-memory-10.3"},nextItem:{title:"Benchmarking -- Node 10.2.1",permalink:"/reports/2025-02-performance-10.2.1"}},s={authorsImageUrls:[void 0]},c=[{value:"Setup",id:"setup",level:2},{value:"Observations",id:"observations",level:2},{value:"Resource Usage",id:"resource-usage",level:3},{value:"Forging Loop",id:"forging-loop",level:3},{value:"Peer propagation",id:"peer-propagation",level:3},{value:"End-to-end propagation",id:"end-to-end-propagation",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Attachment",id:"attachment",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"This report compares benchmarking runs for 2 different flavours of ",(0,o.kt)("inlineCode",{parentName:"p"},"cardano-node"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"10.2-regular")," - regular Node performance baseline from the ",(0,o.kt)("inlineCode",{parentName:"li"},"10.2.x")," release benchmarks."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"10.2-utxohd")," - the UTxO-HD build of the Node based on that same version.")),(0,o.kt)("p",null,"For this benchmark, we're gathering various metrics under the ",(0,o.kt)("em",{parentName:"p"},"value-only")," workload used in release benchmarks: Each transaction consumes 2 inputs and creates 2 outputs,\nchanging the UTxO set. This workload produces full blocks (> 80kB) exclusively. Moreover, it's the workload that produces most stress on the UTxO set. Thus, it's the most meaningful\nworkload when it comes to benchmarking UTxO-HD.  "),(0,o.kt)("p",null,"We target the ",(0,o.kt)("em",{parentName:"p"},"in-memory backing store")," of UTxO-HD - LedgerDB V2 in this case. The on-disk backend is not used. "),(0,o.kt)("p",null,"Benchmarking is performed on a cluster of 52 block producing nodes spread across 3 different AWS regions, interconnected using a static, restricted topology."),(0,o.kt)("h2",{id:"observations"},"Observations"),(0,o.kt)("h3",{id:"resource-usage"},"Resource Usage"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"With UTxO-HD's in-memory backend, the memory footprint increases slightly by 3%."),(0,o.kt)("li",{parentName:"ol"},"Process CPU usage is moderately reduced by 9% with UTxO-HD."),(0,o.kt)("li",{parentName:"ol"},"Additionally, CPU 85% spans decrease in duration by 24% (~1.1 slots).")),(0,o.kt)("p",null,"Caveat: Individual metrics can't be evaluated in isolate; the resource usage profile as a whole provides insight into the system's performance and responsiveness."),(0,o.kt)("h3",{id:"forging-loop"},"Forging Loop"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Block context acquisition improves by 3ms (or 11%), while Ledger ticking takes 3ms (or 10%) longer."),(0,o.kt)("li",{parentName:"ol"},"Creating a mempool snapshot is significantly faster - by 16ms (or 21%)."),(0,o.kt)("li",{parentName:"ol"},"As a result, a UTxO-HD block producing node is able to announce a new header 17ms (or 12%) earlier into a slot."),(0,o.kt)("li",{parentName:"ol"},"Additionally, adoption time on the forger is slightly improved - by 4ms (or 5%).")),(0,o.kt)("h3",{id:"peer-propagation"},"Peer propagation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Block fetch duration increases moderately by 13ms or 4%."),(0,o.kt)("li",{parentName:"ol"},"Adoption times on the peers improve very slightly - by 2ms or 2%.")),(0,o.kt)("h3",{id:"end-to-end-propagation"},"End-to-end propagation"),(0,o.kt)("p",null,"This metric encompasses block diffusion and adoption across specific percentages of the benchmarking cluster, with 0.80 adoption meaning adoption on 80% of all cluster nodes.  "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"There is no significant difference in cluster adoption times between regular and UTxO-HD node.")),(0,o.kt)("h3",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"Regarding the UTxO-HD build using the in-memory LedgerDB V2 backend, we can conclude that:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"it is lighter on CPU usage compared to the regular node, albeit requiring just slightly more RAM."),(0,o.kt)("li",{parentName:"ol"},"it poses no performance risk to block producers; on the contrary, the changes in forging loop metrics seem favourable compared to the regular node.  "),(0,o.kt)("li",{parentName:"ol"},"network performance would be expeceted to be on par with the regular node."),(0,o.kt)("li",{parentName:"ol"},"even under stress, there is no measurable performance regression compared to the regular node."),(0,o.kt)("li",{parentName:"ol"},"as a consequence of the above, performance-wise, it's a viable replacement for the regular in-memory solution.")),(0,o.kt)("h2",{id:"attachment"},"Attachment"),(0,o.kt)("p",null,"Full report for ",(0,o.kt)("em",{parentName:"p"},"value-only workload"),", PDF downloadable ",(0,o.kt)("a",{target:"_blank",href:r(36372).Z},"here"),"."))}m.isMDXComponent=!0},36372:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/files/utxohd-10.2.value-only-6fc915d9fd584640513356bc53e858ea.pdf"}}]);