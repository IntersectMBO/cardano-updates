"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[58800],{39534:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"2025-Q2-sre","metadata":{"permalink":"/quarterly/2025-Q2-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2025-Q2-sre.md","source":"@site/quarterly/2025-Q2-sre.md","title":"SRE Q2 2025 Update","description":"2025-04 - 2025-06","date":"2025-08-05T14:02:57.000Z","formattedDate":"August 5, 2025","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":0.8,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q2 2025 Update","slug":"2025-Q2-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"nextItem":{"title":"SRE Q1 2025 Update","permalink":"/quarterly/2025-Q1-sre"}},"content":"## 2025-04 - 2025-06\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments,\\nsome highlights of SRE achievements for this quarter include:\\n\\n* All IOE cardano-parts supported node environments, including preview,\\npreprod, and mainnet were upgraded through cardano-node releases\\nincluding `10.3.1` and `10.4.1` with various additional pre-release versions\\ntested.\\n\\n* The cardano performance cluster used for benchmarking was upgraded to\\nephemeral instance configuration to additionally benchmark LMDB ledger backend.\\n\\n* Peer snapshot files (and checkpoint file for mainnet) are now a regular part\\nof the release binary artifacts in preparation for genesis mode.\\n\\n* Genesis mode has been rolled out as the default consensus mode for preview\\nand preprod testnets.\\n\\n* [Adawallet](https://github.com/input-output-hk/adawallet) and\\n[Cardano-airgap](https://github.com/IntersectMBO/cardano-airgap) repos received\\nsignificant updates to prepare for some complex but infrequent pool operations.\\n\\n* Aarch64-linux resources were brought online in the Hydra build cluster.\\n\\n\\nDetails for this and many other SRE work items can be found in the biweekly SRE\\nreports."},{"id":"2025-Q1-sre","metadata":{"permalink":"/quarterly/2025-Q1-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2025-Q1-sre.md","source":"@site/quarterly/2025-Q1-sre.md","title":"SRE Q1 2025 Update","description":"2025-01 - 2025-03","date":"2025-04-15T22:28:12.000Z","formattedDate":"April 15, 2025","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":1.09,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q1 2025 Update","slug":"2025-Q1-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q2 2025 Update","permalink":"/quarterly/2025-Q2-sre"},"nextItem":{"title":"SRE Q4 2024 Update","permalink":"/quarterly/2024-Q4-sre"}},"content":"## 2025-01 - 2025-03\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments,\\nsome highlights of SRE achievements for this quarter include:\\n\\n* All IOE cardano-parts supported node environments, including preview,\\npreprod, sanchonet, mainnet were upgraded through cardano-node releases\\nincluding `10.1.4` and `10.2.1` (for pre-release configured machines).\\n\\n* Sanchonet was respun to test the hard fork mechanism to protocol version 11\\nwith community participation.\\n\\n* A nixos buildkite agent module was ported to cardano-playground to support\\ncustom QA testing workflows.\\n\\n* A nixos AWS ephemeral block device module was added to cardano-parts\\nto support upcoming cardano-node UTXO-HD features which leverage fast NVMe block\\ndevices.\\n\\n* The `sanchonet` cardano network was retired and handed over to community as\\nit had fulfilled its purpose as an early testing network for Voltaire era\\ngovernance features.\\n\\n* Cardano node and submit-api container improvements were made to reduce prior\\ninconsistencies, add a new useful mode of operation, add useful configuration\\nreferences and improve documentation.\\n\\n* The cardano-node flake closure was optimized and reduced in size 18 percent.\\n\\n* The nix hydra machine used for cardano-node builds was migrated to upgraded\\nhardware allowing for better evaluation concurrency and therefore an enhanced\\ndeveloper ci experience.\\n\\nDetails of this and other SRE work can be found in the biweekly SRE reports."},{"id":"2024-Q4-sre","metadata":{"permalink":"/quarterly/2024-Q4-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2024-Q4-sre.md","source":"@site/quarterly/2024-Q4-sre.md","title":"SRE Q4 2024 Update","description":"2024-10 - 2024-12","date":"2025-02-05T00:51:53.000Z","formattedDate":"February 5, 2025","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":1.025,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q4 2024 Update","slug":"2024-Q4-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q1 2025 Update","permalink":"/quarterly/2025-Q1-sre"},"nextItem":{"title":"SRE Q3 2024 Update","permalink":"/quarterly/2024-Q3-sre"}},"content":"## 2024-10 - 2024-12\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments,\\nsome highlights of SRE achievements for this quarter include:\\n\\n* Cardano-parts started offering regular\\n  [releases](https://github.com/input-output-hk/cardano-parts/releases) to ease\\n  the process of upgrading rather than only PR merges with migration notes.\\n\\n* All IOE cardano-parts supported node environments, including preview,\\n  preprod, sanchonet, mainnet were upgraded through various cardano-node releases\\n  including `10.0.0-pre`, `10.1.0-pre`, `10.1.1`, `10.1.2`, and finally into\\n  `10.1.3` by the end of December.\\n\\n* All environments were migrated from deprecated grafana agent to grafana alloy.\\n\\n* Sanchonet environment was re-spun twice; once for cardano-node\\n  `10.0.0-pre` and once for a community scheduled PV11 hardfork test.\\n\\n* Preview and preprod networks were successfully forked into Conway era, Plomin\\n  protocol version `10.0`.\\n\\n* Private and shelley-qa chains were retired after fulfilling their intended\\n  goal.\\n\\n* Remaining cardano-world legacy resources were retired, replaced by\\n  cardano-playground.\\n\\nDetails of this and other SRE work can be found in the biweekly SRE reports.\\n\\n### Next steps\\n\\n* Switch to the new cardano-node tracing system as default and retire use of\\n  the legacy tracing system, including dashboards, alerts, cardano-tracer and\\n  cardano-node nixos service updates as well as container image required changes.\\n\\n* Continue cardano-parts and operations improvements."},{"id":"2024-Q3-sre","metadata":{"permalink":"/quarterly/2024-Q3-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2024-Q3-sre.md","source":"@site/quarterly/2024-Q3-sre.md","title":"SRE Q3 2024 Update","description":"2024-07 - 2024-09","date":"2024-10-09T14:24:58.000Z","formattedDate":"October 9, 2024","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":2.21,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q3 2024 Update","slug":"2024-Q3-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q4 2024 Update","permalink":"/quarterly/2024-Q4-sre"},"nextItem":{"title":"SRE Q2 2024 Update","permalink":"/quarterly/2024-Q2-sre"}},"content":"## 2024-07 - 2024-09\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments,\\nSRE achievements for this quarter include:\\n\\n* All IOE cardano-parts supported node environments, including preview,\\n  preprod, sanchonet, mainnet and other clusters were upgraded through various\\n  cardano-node releases of `9.0.0`, `9.1.0`, `9.1.1`, `9.2.0`, and finally into\\n  `9.2.1` by the end of September.\\n\\n* All IOE cardano-parts supported node environments had dual stack ipv4/ipv6\\n  capability added and configured, including supporting scripts and recipes,\\n  module updates, terraform/openTofu resource changes and software updates to\\n  make previously ipv6 incompatible software ipv6 compatible, example:\\n  cardano-faucet. Cardano-parts clusters can now seamlessly participate in ipv6\\n  cardano-node traffic and other ipv6 traffic.\\n\\n* Preview, preprod and mainnet networks were hard forked to Conway.\\n\\n* Legacy mainnet cluster shelley-era high-load relays were scaled down over the\\n  quarter and stopped now that p2p has removed the need for them.\\n\\n* Legacy cardano [explorer](https://explorer.cardano.org/) was retired and\\n  Cardano Foundation is now providing the replacement landing page which links\\n  to several community explorers.\\n\\n* Cardano-smash production load was retired from equinix metal hosting from the\\n  cardano-world repo and transferred to the new cardano-mainnet cluster.\\n\\n* New cardano-mainnet cluster scaling capability was added for the bootstrap\\n  machines.  Block performance analysis was used to tune RTS parameters on the\\n  bootstraps and other mainnet pool machines.\\n\\n* Sanchonet environment was re-spun for cardano-node `9.1.0` and greater compatibility.\\n\\n* Private chain was stopped and re-spun with 2 hr epochs for testing.\\n\\n* New nixosModules were added to cardano-parts and cardano-playground,\\n  including: `profile-blockperf`, `profile-tcpdump` (for saving node traffic\\n  pcaps to s3) and `ogmios`.\\n\\n* Documentation for playground and mainnet cluster operations was improved,\\n  such as documents for: debugging of peer-to-peer connections; governance\\n  voting with the playground stakepools; faucet setup; faucet pool\\n  de-delegation and mainnet dbsync cardano-snapshot operations. See the\\n  `docs/explain` directory of both the\\n  [cardano-playground](https://github.com/input-output-hk/cardano-playground)\\n  and [cardano-mainnet](https://github.com/input-output-hk/cardano-mainnet)\\n  repos for details.\\n\\n* The [cardano-monitoring](https://github.com/input-output-hk/cardano-monitoring)\\n  repository received a lot of documentation and improvements and now also\\n  serves as the home for `devx-ci` metrics after migration away from Grafana\\n  cloud hosting.\\n\\n* An improved [cardano-airgap](https://github.com/Intersectmbo/cardano-airgap)\\n  image for secure signing operations was created and made available.\\n\\n* Hydra CI performance was improved with changes to our custom Nix evaluator\\n  and optimized resource usage while waiting for IFDs.\\n\\n### Next steps\\n\\n* Add a production protocol-parameters cardano-api based server to facilitate\\n  community transaction creation without requiring a live node.\\n\\n* Migrate from deprecated grafana agent to grafana alloy.\\n\\n* Finalize support for the new cardano-node tracing system once the service is\\n  rewritten for general consumption.\\n\\n* Extend govtool frontend and backend to a process-compose stack once govtool\\n  is publicly buildable again.\\n\\n* Continue cardano-parts and operations improvements."},{"id":"2024-Q2-sre","metadata":{"permalink":"/quarterly/2024-Q2-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2024-Q2-sre.md","source":"@site/quarterly/2024-Q2-sre.md","title":"SRE Q2 2024 Update","description":"2024-04 - 2024-06","date":"2024-07-09T18:08:56.000Z","formattedDate":"July 9, 2024","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":1.355,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q2 2024 Update","slug":"2024-Q2-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q3 2024 Update","permalink":"/quarterly/2024-Q3-sre"},"nextItem":{"title":"SRE Q1 2024 Update","permalink":"/quarterly/2024-Q1-sre"}},"content":"## 2024-04 - 2024-06\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments,\\nmain SRE achievements for this quarter include:\\n\\n* All cardano release environments, including preview, preprod, mainnet legacy\\n  and mainnet new clusters were upgraded through various cardano-node releases of\\n  `8.9.2`, `8.9.3`, `8.9.4`, `8.12.1`, and finally into `8.12.2` by the end of\\n  June\\n\\n* Cardano pre-release environments additionally iterated through pre-release\\n  upgrades of `8.11.0-pre`, `8.12.0-pre`, and finally into `8.12.2` by the end\\n  of June with the exception of sanchonet which remains pinned at `8.11.0-pre`\\n  until the next respin to support node version `9.0.0` or greater\\n\\n* Sanchonet environment was re-spun two times for pre-release Conway testing of\\n  cardano-node versions `8.10.0-pre` and `8.11.0-pre` respectively\\n\\n* Private chain environment was re-spun three times to support fast epoch\\n  Conway testing\\n\\n* Cardano-playground and cardano-mainnet repos have added ten operations\\n  oriented documents for knowledge transfer\\n\\n* Block producers which participate in mithril signing will now produce metrics\\n  and can have them scraped with the default metrics agent\\n\\n* A cluster spin-up job to utilize the new cardano-cli `create-testnet-data`\\n  sub-command was created\\n\\n* A nixosModule, dashboards and alerts were added supporting the new cardano\\n  tracing system\\n\\n* Many new operations scripts and features were added, including a template\\n  diff and patch recipe to pull the latest cardano-parts improvements to\\n  consuming repositories more easily\\n\\n### Next steps\\n\\n* Finalize support for the new cardano-node tracing system once the service is\\n  rewritten for general consumption\\n\\n* Add IPv6 cardano-parts support\\n\\n* Extend govtool frontend and backend to a process-compose stack once govtool\\n  is publicly buildable again\\n\\n* Continue cardano-parts and operations improvements"},{"id":"2024-Q1-sre","metadata":{"permalink":"/quarterly/2024-Q1-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2024-Q1-sre.md","source":"@site/quarterly/2024-Q1-sre.md","title":"SRE Q1 2024 Update","description":"2024-01 - 2024-03","date":"2024-04-17T19:23:42.000Z","formattedDate":"April 17, 2024","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":1.97,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q1 2024 Update","slug":"2024-Q1-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q2 2024 Update","permalink":"/quarterly/2024-Q2-sre"},"nextItem":{"title":"Performance & Tracing Q4 2023 Update","permalink":"/quarterly/2023-Q4-performance-and-tracing"}},"content":"## 2024-01 - 2024-03\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments,\\nmain SRE achievements for this quarter include:\\n\\n* All cardano release environments, including preview, preprod, mainnet legacy\\n  and mainnet new clusters were upgraded through cardano-node releases of\\n  8.7.3, 8.9.0 and finally into 8.9.1 by the end of March\\n\\n* All cardano pre-release environments, including sanchonet, private chain, and\\n  shelley-qa clusters were upgraded through cardano-node releases of 8.7.3,\\n  8.8.0-pre, 8.8.1-pre, 8.9.0 and finally into 8.9.1 by the end of March\\n\\n* Sanchonet and private chain environments were both re-spun once each during\\n  this quarter to support new pre-release versions of cardano-node in the Conway era\\n\\n* Cardano-parts added a cardano-db-sync process-compose stack for each\\n  environment\\n\\n* Cardano-parts added a cardano-node process-compose stack for each environment\\n\\n* Cardano-parts added enhancements for topology related nixos modules and\\n  functions to accomodate new bootstrapPeer functionality, new topology\\n  attributes and increased complexity network deployments.\\n\\n* Cardano-parts added support for mithril signers integrated with block\\n  producers and a mithril-signer-verifier service for monitoring\\n\\n* Sanchonet, preview, preprod and mainnet IOG block producers are now signing\\n  mithril certificates\\n\\n* Cardano-parts added support for mithril clients in nixos cardano-node systemd\\n  service, process-compose job stacks and nix cardano-node entrypoint, all of\\n  which also require any mithril snapshot to be signed by a trusted IOG pool\\n  prior to use\\n\\n* Cardano-parts added ip integration tooling, so that similar to other deployer\\n  tools like nixops, nixosConfigurations possess ip information which can be\\n  used in module configuration\\n\\n* Cardano-db-sync snapshots server migration from legacy mainnet cluster to new\\n  mainnet cluster with a rewrite of the snapshot service was completed\\n\\n* Cardano metadata server migration to Cardano Foundation was completed\\n\\n* BlockPerf, a cardano-node performance monitoring tool, was integrated into the\\n  new mainnet cluster relays\\n\\n* Cardano-node bootstrapPeer functionality was added with node 8.9.x, requiring\\n  effort to align nixos service module code between cardano-node nixos\\n  services, iohk-nix topology generation, cardano-ops legacy code, and\\n  cardano-parts module compatibility as well as feature test under various edge\\n  cases\\n\\n* Cardano-playground added govtool backend support for private chain voltaire\\n  testing team\\n\\n### Next steps\\n\\n* Add support for the new cardano-node metrics system\\n\\n* Add IPv6 cardano-parts support\\n\\n* Extend govtool frontend and backend to a process-compose stack\\n\\n* Adapt network spin-up tooling for the new create-testnet-data cardano-cli command\\n\\n* Continue cardano-parts and operations improvements"},{"id":"2023-Q4-performance-and-tracing","metadata":{"permalink":"/quarterly/2023-Q4-performance-and-tracing","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q4-performance-and-tracing.md","source":"@site/quarterly/2023-Q4-performance-and-tracing.md","title":"Performance & Tracing Q4 2023 Update","description":"2023-10 - 2024-01","date":"2024-01-25T10:08:38.000Z","formattedDate":"January 25, 2024","tags":[{"label":"performance-tracing","permalink":"/quarterly/tags/performance-tracing"}],"readingTime":2.28,"hasTruncateMarker":false,"authors":[{"name":"Michael Karg","title":"Performance and Tracing Team Lead","url":"https://github.com/mgmeier","imageURL":"https://github.com/mgmeier.png","key":"mgmeier"}],"frontMatter":{"title":"Performance & Tracing Q4 2023 Update","slug":"2023-Q4-performance-and-tracing","authors":"mgmeier","tags":["performance-tracing"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q1 2024 Update","permalink":"/quarterly/2024-Q1-sre"},"nextItem":{"title":"Consensus Q4 2023 Update","permalink":"/quarterly/2023-Q4-consensus"}},"content":"## 2023-10 - 2024-01\\n\\n### Main achievements\\n\\n* Release benchmarking, leading up to next mainnet release\\n* Conway benchmarking of existing Babbage workloads\\n* P2P benchmarks, validating viability as default topology\\n* Added basic `PlutusV3` capability of our tooling\\n* Publication of benchmarking reports accompanying a mainnet release\\n* GHC9 performance investigation\\n* Finalized and validated all optimizations for the new tracing system\\n* New Nomad benchmarking cluster: production use\\n* Adjustment of our infrastructure to cover the migration to _IntersectMBO_\\n* Conensus QTAs: prototype developed into alpha-stage benchmark\\n* Successful on-boarding of a new team member\\n\\n#### Release benchmarking\\n\\nWe\'ve performed and analyzed benchmarks for node versions `8.6.x` to `8.7.3`, which is projected to be the next mainnet release, throughout Q4. \\nAlong that way, we have identified, located and handled all performance blockers.  \\n\\nAdditionally, we\'ve started publishing benchmarking reports here on Cardano Updates. The format is meant to increase transparency and\\nprovide insight into those measurements that accompany mainnet releases - demonstrating the absence of performance regressions and development\\nof specific metrics over time.\\n\\n#### Conway benchmarks\\n\\nFurthermore, we\'ve done first ever benchmarking of the Conway ledger. To that end, we\'ve ported our Babbage workloads to Conway for\\nimmediate comparability. Fortunately, we\'ve have not found any performance regression in the Conway ledger.\\n\\n#### P2P benchmarks\\n\\nIn Q4, we\'ve validated P2P topology to be viable as default for both relay and block producer nodes. As a consequence, we\'ve switched\\nto P2P topology for benchmarking baselines ourselves.\\n\\n#### GHC9 performance\\n\\nIn Q4, evaluation of GHC9.2\'s and GHC9.6\'s optimizer in the context of the Cardano code base has been completed. \\nEventually, GHC9.6 has shown itself to be much more suitable from a performance perspective. We\'re convinced that\\nwith a few select annotations in the code, GHC9.6\'s optimizer can produce a result on par performance-wise with GHC8.10 - \\nwhich just was a great release in that regard. With GHC9.2 unfortunately, the changes would have to be more invasive - and thus more time-consuming.\\n\\n#### New nomad cluster\\n\\nWe\u2019ve moved the new Nomad cluster into production use and established new baselines for each workload on it. \\nAdditionally, we\u2019ve shut down the legacy `cardano-ops` benchmarking cluster, and archived all raw data from it.\\n\\n#### Consensus component QTAs\\n\\nWe\u2019ve developed the existing prototype into an automatable, self-contained benchmark called `beacon`, as well as systematized workloads and run structure for it.\\nMoreover, we\u2019ve demonstrated usefulness of the metrics, their reproducibility, and identified domains viable for QTAs with system-level benchmarks.\\n\\n#### New team member\\n\\nWe\'re happy to welcome a new joiner to our team! We\'ve successfully onboarded him in Q4; he has taken\\nover the `cardano-tracer` service - the node-external component of the new tracing system - and has already\\nlanded several valuable contributions."},{"id":"2023-Q4-consensus","metadata":{"permalink":"/quarterly/2023-Q4-consensus","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q4-consensus.md","source":"@site/quarterly/2023-Q4-consensus.md","title":"Consensus Q4 2023 Update","description":"Areas of focus","date":"2024-01-23T10:58:30.000Z","formattedDate":"January 23, 2024","tags":[{"label":"consensus","permalink":"/quarterly/tags/consensus"}],"readingTime":2.66,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Q4 2023 Update","slug":"2023-Q4-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Performance & Tracing Q4 2023 Update","permalink":"/quarterly/2023-Q4-performance-and-tracing"},"nextItem":{"title":"SRE Q4 2023 Update","permalink":"/quarterly/2023-Q4-sre"}},"content":"## Areas of focus\\n\\n| Issue                                                                 | Status  |\\n|-----------------------------------------------------------------------|---------|\\n| [Implement legacy mode for UTxO-HD to keep baseline performance][429] | \u2705 Done |\\n| [Assist mainnet node release with initial Conway capabilities][423]   | \u2705 Done |\\n| [Assist with test, benchmark, and improvements to CIP 1694][424]      | \u2705 Done |\\n| [Assist with P2P IOG relay network shut down][414]                    | \u2705 Done |\\n| [Assist with repo transfer to Intersect][425]                         | \u2705 Done |\\n| [Support vendors to deliver contracts][427]                           | \u2705 Done |\\n| [Operation serenity Q4 2023][415]                                     | \u2705 Done |\\n\\n\\n## Highlights\\n\\n### Implement legacy mode for UTxO-HD to keep baseline performance\\n\\n- \u2705 We managed to run a UTxO-HD capable node in legacy mode, maintaining the baseline memory usage while keeping all the ledger state in memory.\\n    - While the legacy mode is not production-ready (it requires further integration and testing), it remains as a plan B should the need arise to release UTxO-HD if our stakeholders so demand it.\\n- \u2705 We pivoted to redesigning the Ledger DB API because:\\n    - This is needed for integrating the LSM-tree backend.\\n\\t- The redesign opened the possibility of implementing an in-memory backend that would keep the same performance and resource requirements as the baseline version (which needs to be confirmed by benchmarks).\\n- \u2705 We created a more general Ledger DB API.\\n- \ud83d\udee0\ufe0f We are integrating (into the feature branch) the existing Ledger DB implementations with the new API.\\n- \ud83d\udee0\ufe0f We are implementing the new in-memory backend.\\n\\n### Assist mainnet node release with initial Conway capabilities, test, benchmark, and improvements to CIP 1694\\n\\n- \u2705  We recognized that Conway introduces a new challenge in the versioning of NTC queries, and we resolved it (see [864][864] and [4770][4770]).\\n\\n### Assist with P2P IOG relay network shut down\\n\\n- \u2705 We created a prototype for the pre-Genesis State Machine for bootstrap peers, which is currently under test (see [this PR][808]).\\n\\n### Assist with repo transfer to Intersect\\n\\n- \u2705 We transferred the `ouroboros-consensus` repository to the Intersect GitHub organization.\\n\\n### Support vendors to deliver contracts\\n\\n- Genesis\\n  - \u2705 Interacted with the Consensus team and addressed resulting feedback on past deliverables.\\n  - \u2705 Finished implementation of the testing infrastructure of Genesis\\n  - \u2705 Started to refine the Proof of Concept demo into an actual implementation of the core components of the Genesis design.\\n- \ud83d\udcbe LSM-tree implementation. Well Typed:\\n  - \u2705 Finished the design of the public facing API.\\n  - \u2705 Defined the LSM-tree database file-type formats.\\n  - \u2705 Implemented property and model-based tests.\\n\\n### Operation serenity Q4 2023\\n\\n- \ud83c\udf89 We welcomed our newest team member @RenateEilers and assisted with her (ongoing) onboarding.\\n- \u2705 We implemented a simplification in the ChainSync mini-protocol that is also a step towards Ouroboros Chronos.\\n- \u2705 We added tests to check Consensus emits valid CBOR, which prevents the generation of invalid binary encoding.\\n- \u2705 We established and implemented an interface between Consensus tooling and P&T tooling, which constitutes a step towards incorporating component level benchmarks in our development process.\\n\\n[429]: https://github.com/IntersectMBO/ouroboros-consensus/issues/429\\n[423]: https://github.com/IntersectMBO/ouroboros-consensus/issues/423\\n[424]: https://github.com/IntersectMBO/ouroboros-consensus/issues/424\\n[414]: https://github.com/IntersectMBO/ouroboros-consensus/issues/414\\n[425]: https://github.com/IntersectMBO/ouroboros-consensus/issues/425\\n[427]: https://github.com/IntersectMBO/ouroboros-consensus/issues/427\\n[415]: https://github.com/IntersectMBO/ouroboros-consensus/issues/415\\n[864]: https://github.com/IntersectMBO/ouroboros-consensus/issues/864\\n[4770]: https://github.com/IntersectMBO/ouroboros-network/issues/4770\\n[808]: https://github.com/IntersectMBO/ouroboros-consensus/pull/808"},{"id":"2023-Q4-sre","metadata":{"permalink":"/quarterly/2023-Q4-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q4-sre.md","source":"@site/quarterly/2023-Q4-sre.md","title":"SRE Q4 2023 Update","description":"2023-10 - 2023-12","date":"2024-01-10T01:52:35.000Z","formattedDate":"January 10, 2024","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":0.915,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q4 2023 Update","slug":"2023-Q4-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Q4 2023 Update","permalink":"/quarterly/2023-Q4-consensus"},"nextItem":{"title":"Performance & Tracing Q3 2023 Update","permalink":"/quarterly/2023-Q3-performance-and-tracing"}},"content":"## 2023-10 - 2023-12\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments,\\nmain SRE achievements for this quarter include:\\n\\n* Cardano-parts support was added for cardano-db-sync, cardano-smash,\\n  cardano-faucet, cardano-metadata, grafana monitoring along with a number of\\n  other features\\n\\n* Completed migration of testnets from cardano-world to the cardano-playground cluster\\n\\n* Completed migration of the cardano book from cardano-world to the cardano-playground\\n  cluster\\n\\n* Completed migration of pools from cardano-ops to the cardano-mainnet cluster\\n\\n* Creation of a mainnet p2p bootstrap cluster\\n\\n* Cardano sanchonet environment respins during the quarter for testing new\\n  cardano-node pre-release Conway era functionality\\n\\n* All environments were upgraded to cardano-node 8.7.2 or 8.7.3 by the end of\\n  the quarter\\n\\n* Completion of a govtool backend deployment for Voltaire chain testing\\n\\n* Creation of a cardano-monitoring repository,\\n  [cardano-monitoring](https://github.com/input-output-hk/cardano-monitoring):\\n\\n  * A new repository enabling agile deployment of EC2 monitoring servers,\\n    compatible with OpenTofu grafana and mimir providers\\n\\n### Next steps\\n\\n* Scale down the mainnet non-p2p legacy cluster\\n\\n* Add deployment support for new network services, such as Mithril\\n\\n* Continue cardano-parts and operations improvements"},{"id":"2023-Q3-performance-and-tracing","metadata":{"permalink":"/quarterly/2023-Q3-performance-and-tracing","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q3-performance-and-tracing.md","source":"@site/quarterly/2023-Q3-performance-and-tracing.md","title":"Performance & Tracing Q3 2023 Update","description":"2023-07 - 2023-09","date":"2023-10-20T19:16:59.000Z","formattedDate":"October 20, 2023","tags":[{"label":"performance-tracing","permalink":"/quarterly/tags/performance-tracing"}],"readingTime":3.27,"hasTruncateMarker":false,"authors":[{"name":"Michael Karg","title":"Performance and Tracing Team Lead","url":"https://github.com/mgmeier","imageURL":"https://github.com/mgmeier.png","key":"mgmeier"}],"frontMatter":{"title":"Performance & Tracing Q3 2023 Update","slug":"2023-Q3-performance-and-tracing","authors":"mgmeier","tags":["performance-tracing"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q4 2023 Update","permalink":"/quarterly/2023-Q4-sre"},"nextItem":{"title":"SRE Q3 2023 Update","permalink":"/quarterly/2023-Q3-sre"}},"content":"## 2023-07 - 2023-09\\n\\n### Main achievements\\n\\n* Release benchmarking\\n* Developing and running UTxO-HD benchmarks - in-memory flavour\\n* P2P benchmarks, facilitating rollout\\n* Production-readiness of the new Nomad cluster has been reached\\n* Optimization of and introspection capability for the new tracing system\\n* GHC9 performance investigation (and possible remedy)\\n* Conensus QTAs: first real-world application of prototype\\n#### Release benchmarking\\n\\nOngoing release benchmarking is a crucial safeguard to `cardano-node`\'s release cycle from a performance perspective. We\'ve performed and analyzed benchmarks for node versions `8.2.x` to `8.5` throughout Q3.\\n\\n#### UTxO-HD benchmarks\\n\\nTargeting a specific new feature in benchmarks requires development effort and fine-tuning the machinery. In Q3, we achieved that for the in-memory flavour of UTxO-HD, enabling benchmark delivery.\\n\\n#### P2P benchmarks\\n\\nIn Q3, we performed additional P2P benchmarks to facilitate the comprehensive rollout of that feature.\\n\\n#### New nomad cluster\\n\\nThe new hardware cluster for benchmarks, which is controlled through the new nomad backend, has received \\nvarious rounds of validation and adjustments in Q3 - in addition to finalizing integration with the rest\\nof our pipeline. The confidence in metrics gathered on the cluster is now sufficient for us to consider it\\nready for production use.\\n\\n#### New tracing system\\n\\nOur new tracing system has received various rounds of optimization in Q3. We could verify in our benchmarks that\\nit is roughly on par with the legacy system while offering a richer feature set and greater flexibility.  \\n\\nAdditionally, in Q3 we equipped the system with an introspection capability. This is now used for generating\\nend user documentation that stays in-sync with definitions in code, and for automated consistency checking of the entire system.\\n\\n#### GHC9 performance\\n\\nIn Q3, a joint investigation with DevX into GHC9\'s behaviour revealed where and how GHC9 misses opportunities for\\noptimization of generated code. This led to an approach to annotate our codebase accordingly to re-enable\\nthose optimizations - which is still being validated.\\n\\n#### Consensus QTAs\\n\\nIn collaboration with Consensus and DevX, we advanced the Consensus QTAs prototype capturing ledger operations\'\\nperformance characteristics. It\'s now applicable, and being applied, to a real-world task - namely\\ngathering evidence of the effect of aforementioned changes allowing for performant GHC9 builds.\\n\\n### Next steps\\n\\n#### Benchmarking:\\n\\nIn Q4, the focus will be on:\\n* facilitating the next mainnet release\\n* benchmarking runs in the Conway era\\n* developing benchmarks / workloads for Conway-exclusive actions\\n* implementing a specialized benchmark setup for the UTxO-HD on-disk variant\\n* developing new Plutus benchmarks to safeguard Plutus V3\\n* benchmarks regarding the rollout of P2P\\n\\n#### Performance\\n\\nFor certain blocking performance issues we\'ve located the cause, or even found a solution in a cross-team effort. In Q4 we\'ll advance that work to ensure the ongoing\\nrelease cycle for mainnet, as well as make GHC9 become a viable release platform.\\n\\n#### New tracing system\\n\\nFor the new tracing system, we\'ll finalize optimization - current results are already on par with the legacy system. Furthermore, we will finish up comprehensive documentation, as well as description of a recommended setup, for which we can provide initial support.\\n\\n#### UTxO-HD monitoring\\n\\nWe\'ll augment our analysis pipeline so it can process monitoring data from UTxO-HD nodes connected to mainnet in a meaningful way.\\n\\n#### Nomad backend\\n\\nFrom Q4 on, this backend will be in production use. We plan on adding various UX and flexibility improvements, and further fine-tuning some profiles for nomad.\\n\\n#### Workbench\\n\\nWe will prepare for a future move of our performance workbench into a separate project. This entails restructuring, refactoring and reimplementation of certain few components that currently assume to always be in sync with `cardano-node`.\\n\\n#### Consensus component QTAs (co-development)\\n\\nIn Q4 there will be ongoing work with and support for the existing prototype. We plan to identify a fixed set of input data that yields results of high informative value, and to formalize the process to a point that enables future automation."},{"id":"2023-Q3-sre","metadata":{"permalink":"/quarterly/2023-Q3-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q3-sre.md","source":"@site/quarterly/2023-Q3-sre.md","title":"SRE Q3 2023 Update","description":"2023-07 - 2023-09","date":"2023-10-19T23:39:19.000Z","formattedDate":"October 19, 2023","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":0.905,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q3 2023 Update","slug":"2023-Q3-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"Performance & Tracing Q3 2023 Update","permalink":"/quarterly/2023-Q3-performance-and-tracing"},"nextItem":{"title":"SRE Q2 2023 Update","permalink":"/quarterly/2023-Q2-sre"}},"content":"## 2023-07 - 2023-09\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments, main SRE achievements for this quarter include:\\n* Completion of mainnet relay networking conversion to p2p topology\\n* Cardano sanchonet environment respins for testing new cardano-node pre-release Conway era functionality\\n* Stabilization of cardano-explorer in cardano-world using high IOPS bare metal machines\\n* Creation of a nix content addressed packages repository, [capkgs](https://github.com/input-output-hk/capkgs):\\n  * To provide lightweight release binaries thereby avoiding sluggish nix flakes and devShells\\n* Creation of a cardano performance benchmarking cluster, [cardano-perf](https://github.com/input-output-hk/cardano-perf):\\n  * To replace legacy cluster benchmark tooling\\n* Creation of a cardano cluster composition repository, [cardano-parts](https://github.com/input-output-hk/cardano-parts):\\n  * For enabling multi-cluster, multi-role cardano network deployments\\n* Creation of a cardano testnets repository, [cardano-playground](https://github.com/input-output-hk/cardano-playground):\\n  * Utilizing cardano-parts for testnet deployments\\n* Creation of a sanchonet demo repository, [sanchonet-demo](https://github.com/input-output-hk/sanchonet-demo):\\n  * Utilizing cardano-parts for fast sanchonet test environment and demo purposes\\n\\n### Next steps\\n\\n* Continue with migration of cardano-world testnets to cardano-playground\\n* Proceed with spinup of mainnet p2p bootstrap cluster\\n* Scale down mainnet non-p2p legacy cluster at the appropriate time"},{"id":"2023-Q2-sre","metadata":{"permalink":"/quarterly/2023-Q2-sre","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q2-sre.md","source":"@site/quarterly/2023-Q2-sre.md","title":"SRE Q2 2023 Update","description":"2023-04 - 2023-06","date":"2023-07-22T17:16:08.000Z","formattedDate":"July 22, 2023","tags":[{"label":"sre","permalink":"/quarterly/tags/sre"}],"readingTime":0.68,"hasTruncateMarker":false,"authors":[{"name":"John Lotoski","title":"Service Reliability Engineer","url":"https://github.com/johnalotoski","imageURL":"https://github.com/johnalotoski.png","key":"johnalotoski"}],"frontMatter":{"title":"SRE Q2 2023 Update","slug":"2023-Q2-sre","authors":"johnalotoski","tags":["sre"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q3 2023 Update","permalink":"/quarterly/2023-Q3-sre"},"nextItem":{"title":"Network Q2 2023 Update","permalink":"/quarterly/2023-Q2-network"}},"content":"## 2023-04 - 2023-06\\n\\n### Main achievements\\n\\nIn addition to ongoing general maintenance and support of cardano environments, main SRE achievements for this quarter include:\\n- Expanding the darwin CI cluster and adding aarch64 builder support\\n- Adding bare metal capability to bitte clusters\\n- Creating a devx-ci cluster containing a Hydra build server and Linux build farm which is intended to replace Cicero functionality\\n- Creation of pool performance analysis queries and scripting\\n- Migration of testnet metadata server to cardano-world\\n- Cardano shelley qa migration to cardano-world\\n- Cardano sanchonet environment spin up to test Conway era functionality\\n- Mainnet relay conversion to p2p topology usage is progressing with 50% of mainnet relays now using p2p topology and networking feature\\n\\n### Next steps\\n\\n- Continue with the conversion of mainnet to using p2p topology"},{"id":"2023-Q2-network","metadata":{"permalink":"/quarterly/2023-Q2-network","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q2-network.md","source":"@site/quarterly/2023-Q2-network.md","title":"Network Q2 2023 Update","description":"2023-04 - 2023-06","date":"2023-07-16T17:49:37.000Z","formattedDate":"July 16, 2023","tags":[{"label":"network","permalink":"/quarterly/tags/network"}],"readingTime":5.145,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Q2 2023 Update","slug":"2023-Q2-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"SRE Q2 2023 Update","permalink":"/quarterly/2023-Q2-sre"},"nextItem":{"title":"Consensus Q2 2023 Update","permalink":"/quarterly/2023-Q2-consensus"}},"content":"## 2023-04 - 2023-06\\n\\n### Main achievements\\n\\n#### Eclipse Evasion\\n\\nWe finalised the design of eclipse evasion and implemented its mechanism which\\nrelays on connectivity to _big ledger peers_.  _Big ledger peers_ are the\\nlargest ledger peers which accumulate 90% of stake (currently there are less\\nthan 1000 of them).  The outbound governor has new targets for _known_,\\n_established_ and _active_ big ledger peers which work in a similar way that\\nsuch targets work for ledger peers.  The [ouroboros-network#4662] PR is\\ncurrently in review.\\n\\nAs part of this work we also identified a bug which would prevent a node to\\nconnect to itself.  Such connections are not easily detectable and are expected\\nto be dropped by the churn mechanism, nonetheless they should not be buggy.\\nThe failure was discovered thanks to our e2e simulation of diffusion using\\n`io-sim` & property based testing.\\n\\nThe PR also refactors the heart of the `ouroboros-network` interface reducing\\ntechnical debt that would otherwise accumulate.\\n\\nWe also identified a possible improvement in the churn mechanism, which will be\\nimplemented in Q3.  Churn needs to await for peers to terminate, we can\\nimprove the synchronisation. [ouroboros-network#4617]\\n\\n#### Ecosystem P2P Deployment Progress\\n\\nWe reached __50% of stake in hands of SPOs who run at least on P2P relay__.  Now\\nalso Emurgo and CF are running some P2P relays. Also 20% of IOG relays are\\nrunning in P2P mode.\\n\\n![P2P Progress](/images/network/2023-07-06-p2p-progress.png)\\n\\n#### Peer Sharing\\n\\nWe implemented _bootstrapping for peer sharing_ (also known as light peer\\nsharing).  New downstream (inbound) peers are now added to the _known peers_ of\\nthe _outbound governor_.  Together with peer sharing this allows for non\\nregistered relays to propagate through the network. [ouroboros-network#3596]\\n\\n_Please note that peer sharing is disabled by default and is not considered safe\\nuntil Bootstrap Peers (see below) or Genesis is implemented._\\n\\n#### Diffusion (P2P)\\n\\n- We designed a feature which will reduce the load on IOG relays (in future\\n  also run by CF & Emurgo).  The feature consists of two parts.  A new source\\n  of peers called _bootstrap peers_ (obtained from via an https request), the\\n  ability to switch from bootstrap peers to ledger peers if the node is synced\\n  (we are collaborating with the consensus team on the interface [Bootstrap\\n  Peers IER][bootstrap-ier]).   This feature will be completed in Q3.\\n  [ouroboros-network#4530]\\n\\n- We published a blog post about [P2P design & implementation][p2p-blog].\\n\\n- Karl Knutsson (CF) fixed an issue observed on a relay with a lot of outbound connections:\\n  [ouroboros-network#4559].\\n\\n- We merged changes which allow the consensus layer to start / stop block\\n  forging thread.  This will allow to deploy P2P block producing nodes which\\n  serve as a live backup node. [ouroboros-consensus#140]\\n\\n- We fixed a few bugs in local root peers DNS resolution service:\\n  [ouroboros-network#4583], [ouroboros-network#4571].\\n\\n- We limited concurrency of DNS name resolutions: [ouroboros-network#4596].\\n\\n- Galois Inc implemented query option for Handshake: [ouroboros-network#4256].\\n\\n- We fixed handshake query timeout: [ouroboros-network#4608].\\n\\n- We implemented warm valency for local root peers.  This can help when using\\n  DNS names in local root peers which resolve to many IP addresses. [ouroboros-network#4575]\\n\\n- We merged handshake changes which allow query protocol versions.  Thanks to\\n  James Parker from Galois Inc.: [ouroboros-network#4256], [cardano-cli#30].\\n\\n### Other Improvements & Developments\\n\\n#### CDDL\\n\\n- We added `node-to-node` and `node-to-client` CDDL specs / tests for encoding\\n  of `NodeToNodeVersionData` and `NodeToClientVersionData`.  \\n\\n- We clarified an inconsistency between CDDL spec and implementation which is\\n  highly polymorphic.  We designed and implemented a fix for `tx-submission`\\n  and `local-tx-submission` mini-protocols.  Specs for other mini-protocols will\\n  be improved at a later stage. [ouroboros-network#4580]\\n\\n#### [Cardano Ping][cardano-ping]\\n\\n- `cardano-ping` command was deprecated in favour of `cardano-cli ping` (the\\n  transition was done by the `node` team).\\n\\n- Support for `node-to-client` protocol using Unix sockets.\\n  [ouroboros-network#4601]\\n\\n- Support for `NodeToNodeV_11` and `NodeToClientV_16`, [ouroboros-network#4587]\\n\\n- `cardano-cli ping` is now using _ISO8601_ format for timestamps.  Formatting of\\n  messages was improved. [ouroboros-network#4593]\\n\\n- `cardano-cli ping` has a new `--query-versions` flag which allows to query\\n    supported versions by the remote node.  This is supported by\\n  `cardano-node-8.1.0`. [ouroboros-network#4589], [cardano-node#5313], [cardano-cli#30]\\n\\n#### [IOSim][io-sim]\\n\\n- We fixed timeouts & delays in `io-classes` in a series of PRs: [io-sim#81],\\n  [io-sim#82], [io-sim#86], [io-sim#87].\\n\\n- We released `strict-stm-1.1.0.1` on Hackage which fixed a bug in package\\n  description file: [io-sim#101].\\n\\n#### [Typed Protocols][typed-protocols]\\n\\n- We published haddocks of `typed-protocols` at\\n  https://input-output-hk.github.io/typed-protocols\\n\\n#### [Cardano Client][cardano-client]\\n\\n- We fixed a bug in `cardano-client-0.1.0.2` release which results in clients\\n  (e.g. `db-sync`) negotiate an experimental protocol version.\\n\\n#### Technical debt\\n\\n- After the split between consensus & network, we made `cardano-client`\\n  independent of `ouroboros-consensus-diffusion`: [ouroboros-network#4526].\\n\\n- We wrap all exceptions in `DiffusionError`: [ouroboros-network#4537], [cardano-node#5356].\\n\\n#### CI improvements\\n\\n- We switched to use GitHub merge queues in `ouroboros-network`, `io-sim` and\\n  `typed-protocols` repositories; [typed-protocols#30], [ouroboros-network#4546].\\n\\n- We cleaned & updated scripts which run on CI.\\n\\n- We implemented a script to verify & release packages on CHaP; [ouroboros-network#4542], [ouroboros-network#4573].\\n\\n- We implemented a new CI script and cleaned existing ones:\\n  [ouroboros-network#4572].\\n\\n- We don\'t install cryptographic libraries on CI anymore as none of our\\n  packages requires them; [ouroboros-network#4539].\\n\\n- Improved caching of dependencies: [ouroboros-network#4553].\\n\\n- We made it possible to trigger building haddock manually:\\n  [ouroboros-network#4549].\\n\\n#### GHC 9.4 & 9.6\\n\\nWe made all repositories under our control compile with `ghc-9.4` and `ghc-9.6`\\nwhich includes `ouroboros-network`, `io-sim`, `typed-protocols` and\\n`Win32-network`.\\n\\n### Next steps\\n\\nWe will continue towards our [aspirational roadmap][roadmap].\\n\\n* We will continue reviewing eclipse evasion.\\n* As [ouroboros-consensus#140] was merged, we are making progress towards\\n  releasing P2P on block production nodes.  We hope to analyse performance\\n  regression on such nodes observed on the benchmarking cluster. [roadmap-3887]\\n* We are also focused on [roadmap-3969]. Note that it was expanded in Q2.\\n\\n\\n[typed-protocols]: https://github.com/input-output-hk/typed-protocols\\n[typed-protocols#30]: https://github.com/input-output-hk/typed-protocols/pull/30\\n\\n[io-sim]: https://github.com/input-output-hk/io-sim\\n[io-sim#81]: https://github.com/input-output-hk/io-sim/pull/81\\n[io-sim#82]: https://github.com/input-output-hk/io-sim/pull/82\\n[io-sim#86]: https://github.com/input-output-hk/io-sim/pull/86\\n[io-sim#87]: https://github.com/input-output-hk/io-sim/pull/87\\n[io-sim#101]: https://github.com/input-output-hk/io-sim/pull/101\\n\\n\\n[cardano-node#5313]: https://github.com/input-output-hk/cardano-node/pull/5313\\n[cardano-node#5356]: https://github.com/input-output-hk/cardano-node/pull/5356\\n[cardano-cli#30]: https://github.com/input-output-hk/cardano-cli/pull/30/\\n\\n[cardano-client]: https://github.com/input-output-hk/ouroboros-network/blob/master/cardano-client\\n[cardano-ping]: https://github.com/input-output-hk/ouroboros-network/blob/master/cardano-ping\\n[ouroboros-network#3596]: https://github.com/input-output-hk/ouroboros-network/issues/3596\\n[ouroboros-network#4256]: https://github.com/input-output-hk/ouroboros-network/pull/4256\\n[ouroboros-network#4256]: https://github.com/input-output-hk/ouroboros-network/pull/4256\\n[ouroboros-network#4526]: https://github.com/input-output-hk/ouroboros-network/pull/4526\\n[ouroboros-network#4530]: https://github.com/input-output-hk/ouroboros-network/issues/4530\\n[ouroboros-network#4537]: https://github.com/input-output-hk/ouroboros-network/issues/4537\\n[ouroboros-network#4539]: https://github.com/input-output-hk/ouroboros-network/issues/4539\\n[ouroboros-network#4540]: https://github.com/input-output-hk/ouroboros-network/issues/4540\\n[ouroboros-network#4542]: https://github.com/input-output-hk/ouroboros-network/issues/4542\\n[ouroboros-network#4546]: https://github.com/input-output-hk/ouroboros-network/pull/4546\\n[ouroboros-network#4549]: https://github.com/input-output-hk/ouroboros-network/issues/4549\\n[ouroboros-network#4553]: https://github.com/input-output-hk/ouroboros-network/issues/4553\\n[ouroboros-network#4559]: https://github.com/input-output-hk/ouroboros-network/pull/4559\\n[ouroboros-network#4571]: https://github.com/input-output-hk/ouroboros-network/pull/4571\\n[ouroboros-network#4572]: https://github.com/input-output-hk/ouroboros-network/pull/4572\\n[ouroboros-network#4573]: https://github.com/input-output-hk/ouroboros-network/pull/4573\\n[ouroboros-network#4575]: https://github.com/input-output-hk/ouroboros-network/pull/4575\\n[ouroboros-network#4580]: https://github.com/input-output-hk/ouroboros-network/pull/4580\\n[ouroboros-network#4583]: https://github.com/input-output-hk/ouroboros-network/pull/4583\\n[ouroboros-network#4587]: https://github.com/input-output-hk/ouroboros-network/pull/4587\\n[ouroboros-network#4589]: https://github.com/input-output-hk/ouroboros-network/pull/4589\\n[ouroboros-network#4593]: https://github.com/input-output-hk/ouroboros-network/pull/4593\\n[ouroboros-network#4596]: https://github.com/input-output-hk/ouroboros-network/pull/4596\\n[ouroboros-network#4601]: https://github.com/input-output-hk/ouroboros-network/pull/4601\\n[ouroboros-network#4608]: https://github.com/input-output-hk/ouroboros-network/pull/4608\\n[ouroboros-network#4662]: https://github.com/input-output-hk/ouroboros-network/pull/4662\\n\\n[bootstrap-ier]: https://github.com/input-output-hk/ouroboros-consensus/blob/fbb8c8ee97517809dec0d0c8ae3fae9b8d272caf/docs/website/docs/bootstrap-peers-IER.md\\n[ouroboros-consensus#140]: https://github.com/input-output-hk/ouroboros-consensus/pull/140\\n\\n[io-sim-blog]: https://engineering.iog.io/2023-04-14-io-sim-annoucement\\n[p2p-blog]: https://engineering.iog.io/2023-06-28-p2p\\n\\n[roadmap]: https://github.com/orgs/input-output-hk/projects/39/views/30\\n[roadmap-3887]: https://github.com/orgs/input-output-hk/projects/39/views/30?pane=issue&itemId=6875505\\n[roadmap-3969]: https://github.com/orgs/input-output-hk/projects/39/views/30?pane=issue&itemId=8920085"},{"id":"2023-Q2-consensus","metadata":{"permalink":"/quarterly/2023-Q2-consensus","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-Q2-consensus.md","source":"@site/quarterly/2023-Q2-consensus.md","title":"Consensus Q2 2023 Update","description":"2023-04 -- 2023-06","date":"2023-07-16T17:45:45.000Z","formattedDate":"July 16, 2023","tags":[{"label":"consensus","permalink":"/quarterly/tags/consensus"}],"readingTime":4.47,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Q2 2023 Update","slug":"2023-Q2-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Network Q2 2023 Update","permalink":"/quarterly/2023-Q2-network"},"nextItem":{"title":"Consensus Quarterly Update","permalink":"/quarterly/2023-04-25-consensus"}},"content":"## 2023-04 -- 2023-06\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\n- We finished a major prototype refactoring, which includes:\\n    - A better and finer grained DB lock mechanism.\\n    - Elimination of race conditions.\\n    - Support for configuring batch query size and flushing rate. This is crucial to allow node users to tweak performance.\\n    - Architectural simplifications and performance improvements.\\n- We implemented a new package to support db-sync integration with UTxO-HD.\\n- We ran another set of ad-hoc benchmarks:\\n    - We uncovered a performance regression on the Network component when using `GHC-9.2/9.4`.\\n    - The synchronization and replay speed are as expected.\\n    - However, we uncovered memory consumption issues (see figure below).\\n        - The in-memory backend is consuming more memory than the baseline.\\n        - The LMDB backend shows an unexpected memory usage peak.\\n        - Investigation on these issues is ongoing.\\n- We integrated the latest changes in `main` branch.\\n    - This required a re-design of the mempool to include the mempool fairness\\n      improvement.\\n\\n![](/images/consensus/2023-Q2-utxo-hd-sync-ad-hoc-benchmarks.png)\\n\\n#### Genesis\\n\\n- The Genesis work for this PI focused on an high-priority issue from the IOG Researchers\' feedback on the proposal.\\n    - This particular question was not anticipated when the Q2 PI was planned.\\n    - As a result, the chain generators work, the ChainSync Jumping performance work, and the Genesis node prototype work were deprioritized.\\n    - That work has accordingly been rolled over into the Statement of Work for the first Genesis vendor work package.\\n- The IOG Researchers\' feedback on the design was very valuable. It had two primary effects.\\n- Outcome 1: We re-introduced distinct behaviors when the node is \\"syncing\\" versus when it is \\"caught up\\".\\n    - This eliminated a DoS vector introduced by the proposal, instead of having to argue that it was well-mitigated.\\n    - The additional design complexity is relatively small.\\n- Outcome 2: The issue that was unanticipated is whether the Cardano chain is consistently dense enough to rely on Genesis without any checkpointing.\\n    - The determination so far is that---assuming the adversary never controls more than four of the seven genesis keys---the most vulnerable segment is in the pure Praos era.\\n    - All the preceding windows are significantly more robust, including the entire Byron and Transitional Praos eras.\\n    - Thus checkpointing is not necessary for the initial Genesis release, though it still may be a reasonable addition later.\\n    - The primary invention was a model for bounding how much benefit the adversary\'s long-range attack could possibly gain from Praos\'s natural short forks.\\n- Relevant questions that the IOG Researchers are still assessing.\\n    - These do not block the Genesis implementation, but do affect the ultimate values of specific parameters.\\n    - Question 1: what is the upper bound on the duration of an eclipse that a healthy Praos node will survive?\\n    - Question 2: what is the upper bound on how much grinding can improve the adversary\'s leader schedule within some Genesis window?\\n\\n#### Support\\n- We performed an analysis on number of file descriptors used by Consensus, this\\n  information can be used by the node operators to check if the number of file\\n  descriptors they want to support are enough, thus improving the user (eg node\\n  operator) experience.\\n- We implemented a mempool fairness improvement, by which transactions are\\n  guaranteed to be processed irrespective of their size.\\n\\n#### Technical debt\\n\\n- We fixed a bug in followers logic, which was discovered by our `QuickCheck`\\nproperty tests.\\n- We created an [immutable DB\\n  server](https://github.com/input-output-hk/ouroboros-consensus/pull/68). This tool allows to serve blocks from the immutable DB to a node that connects to it. This has a remarkable value for testing and benchmarking purposes. For instance, by using this component, we can benchmark the performance of different aspects of Consensus, such as syncing from scratch, without adding Network interference in the performance results.\\n- We created a [`db-truncater`](https://github.com/input-output-hk/ouroboros-consensus/pull/70) tool, which can be used in disaster recovery and benchmarking scenarios.\\n- We created a [benchmarks comparison tool](https://github.com/input-output-hk/ouroboros-consensus/pull/161) that we plan on using for comparing the performance of two Consensus releases. This will allow us to catch performance regressions early on in the process, before they make it to the node (and show in the system level benchmark tests), thus greatly saving development costs. As an example, the graph below shows the performance *improvements* introduced by the Ledger team in version `0.6.0.0` of Consensus wrt version `0.5.0.0`.\\n\\n![](/images/consensus/2023-Q2-beacon-graph.png)\\n\\n#### Fostering collaboration\\n\\n- We released `fs-sim` as open-source repository. This lowers the barrier to entry for external contributors, which will indirectly benefit the Cardano project.\\n- We migrated the consensus code to a [new repository](https://github.com/input-output-hk/ouroboros-consensus), splitting\\nit from the `ouroboros-network` repository. This will save development effort for both the Network and the Consensus teams, since there will be less interference (for instance when making releases).\\n- We made several improvements to our release processes, which will translate in time savings. As an example, we went from 16 to 4 packages, which makes the release process simpler and smother. Our release process now makes it easier to align versions and make releases (both for us and for our downstream users).\\n- We added an explanation of the hardfork-combinator forecast horizon, that will benefit not only our team, but future external contributors.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- We will [get UTxO-HD ready for handover](https://github.com/input-output-hk/ouroboros-consensus/issues/28).\\n\\n#### Genesis\\n\\n- We will regularly liaise with the vendor(s) satisfying the Genesis Statement(s) of Work."},{"id":"2023-04-25-consensus","metadata":{"permalink":"/quarterly/2023-04-25-consensus","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-04-25-consensus.md","source":"@site/quarterly/2023-04-25-consensus.md","title":"Consensus Quarterly Update","description":"Consensus Quarterly Update","date":"2023-04-25T00:00:00.000Z","formattedDate":"April 25, 2023","tags":[{"label":"consensus","permalink":"/quarterly/tags/consensus"}],"readingTime":2.3,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Quarterly Update","slug":"2023-04-25-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Q2 2023 Update","permalink":"/quarterly/2023-Q2-consensus"},"nextItem":{"title":"Network Q1 2023 Update","permalink":"/quarterly/2023-04-04-network"}},"content":"## Consensus Quarterly Update\\n## 2023-01 - 2023-03\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\n- We finished the testing activities for the prototype, which involved adding\\n  new tests, and fixing and enabling temporarily disabled tests.\\n- We spent a substantial amount of effort refactoring and cleaning the\\n  prototype.\\n- We audited the UTxO HD prototype to make sure it can accommodate the migration\\n  of other tables (eg stake-keys registration) from memory to disk. The result\\n  of the audit was positive.\\n- We ran ad-hoc benchmarks for reading keys and flushing values to disk. No\\n  unexpected costs found.\\n- We ran the first system level benchmarks. The performance regressions reported\\n  were due to an unrealistic snapshotting rate. We need to re-run them again\\n  after we design a more fine grained locking mechanism.\\n\\n#### Genesis\\n\\n- We elaborated a roadmap of the remaining work for Genesis.\\n- We presented the design to the IOG Researchers and PNSol on February 20. The\\n  design was well received. We updated the Genesis design with the researcher\'s\\n  feedback.\\n    - We plugged the new DoS vector identified during the aforementioned\\n      presentation.\\n- We developed a generator for adversarial leader schedules that satisfy key\\n  Ouroboros properties, which will be used to test the Genesis design.\\n    - The generator enables use of smaller Ouroboros parameters, which makes\\n      extrema more likely and counterxamples easier interpret.\\n- We wrote up the latest design iteration.\\n- We continued benchmarking the Chain Sync Jumping prototype. In particular:\\n    - We debugged the prototype\'s performance regression, and unmasked the\\n      actual cause by patching our initial theory (bad queuing behavior)\\n    - We identified and validated the actual cause (a pathological case in\\n      BlockFetch tiebreaker).\\n\\n#### Support\\n\\n- We created two new tools. One for dumping CBOR encoded blocks to JSON. Ahother\\n  to serve a local immutable DB.\\n\\n#### Conway era\\n\\n- We integrated the Conway era into consensus.\\n\\n#### Technical debt\\n\\n- We fixed a bug with followers, which was discovered by property tests.\\n- We developed a DSL for specifying and running ChainDB test cases.\\n- We fixed failing tests with iterators.\\n- We created micro-benchmarks for adding transactions to the mempool.\\n\\n#### Fostering collaboration\\n\\n- We released a new technical documentation site for consensus.\\n- We factored out several packages to external repositories. Some of this work\\n  originated in the UTxO HD workstream.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/28\\n\\n#### Genesis\\n\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/33\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/32\\n- https://github.com/input-output-hk/ouroboros-consensus/issues/31\\n\\n#### Support\\n\\n- Design Consensus side of hardfork-enactment in the Voltaire phase\\n  ([#4180](https://github.com/input-output-hk/ouroboros-network/issues/4180)).\\n- Estimate the number of file descriptors Consensus needs\\n  [#20](https://github.com/input-output-hk/ouroboros-consensus/issues/20).\\n\\n#### Tech debt\\n\\n- Identify Quantitative Timeliness Agreements (QTAs) metrics that we can define\\n  for consensus. Pick one and implement benchmarks for it.\\n\\n#### Fostering collaboration\\n\\n- Onboard a new team member."},{"id":"2023-04-04-network","metadata":{"permalink":"/quarterly/2023-04-04-network","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-04-04-network.md","source":"@site/quarterly/2023-04-04-network.md","title":"Network Q1 2023 Update","description":"2023-01 - 2023-03","date":"2023-04-04T00:00:00.000Z","formattedDate":"April 4, 2023","tags":[{"label":"network","permalink":"/quarterly/tags/network"}],"readingTime":2.62,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Q1 2023 Update","slug":"2023-04-04-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Quarterly Update","permalink":"/quarterly/2023-04-25-consensus"},"nextItem":{"title":"Ledger Team Update","permalink":"/quarterly/2023-04-03-ledger"}},"content":"## 2023-01 - 2023-03\\n\\n### Main achievements\\n\\n#### Gradual dynamic P2P release on mainnet\\n\\nWe released two version of `cardano-node` with dynamic P2P capabilities:\\n\\n* [`1.35.6`][cardano-node-1.35.6]\\n  - we found and fixed a bug in exception handling in `peer-state-actions`\\n    [pull-4357]\\n  - we found and fixed a busy loop when demoting a peer from hot to warm [pull-4385] \\n* [`1.35.7`][cardano-node-1.35.7]\\n  - includes interoperability in the legacy non-p2p network stack [pull-4467]\\n* we fixed a busy loop of demotion & promotions: `warm -> hot -> warm`\\n  [pull-4485] /it will be included in `cardano-node-8.0.0` release/.\\n\\nCurrently there are more than 200 P2P relays on mainnet.\\n\\n#### Peer Sharing\\n\\nWe implemented /peer sharing/ [pull-4019] which will be available as an\\nexperimental feature in one of the future `cardano-node` releases.\\n\\nWe implemented /light peer sharing/, e.g. adding inbound connections to the set\\nof known peers of the outbound governor, which allows to bootstrap relays not\\nregistered on chain.  This complements peer sharing.  The [pull-4277] is in\\nlate review stages.\\n\\n#### Eclipse Evasion\\n\\nWe finalised design of eclipse evasion and we started implementing it.  We\\nhave an initial implementation (not merged). We are in the process of extending\\nour test suite to cover new implementation details: [issue-3886], [pull-4462].\\n\\n#### Cardano Network Service Assurance\\n\\nGalois has been making progress on _Cardano Network Service Assurance_ project.\\n\\n* In cardano-node, they have developed a `datapoint` abstraction that creates\\n  a queue of (existing) log events, they now have two such `datapoint`s (of log\\n  events) implemented.\\n\\n* They have developed a `datapoint` client executable that can connect to a node\\n  which serves the \\"new tracing\\".\\n\\n* They have been exploring approaches for the consolidation and analysis of\\n  `datapoint` data to extract actionable network health status.\\n\\n#### Cardano-Node\\n\\n* We made it possible to configure accepted connections limit [pull-4902].\\n\\n#### Testing improvements\\n\\n* We fixed a bug in network simulation implementation of TCP simultaneous open [pull-4265].\\n\\n* We introduced header-body split in the diffusion simulation [pull-4419] (in review).\\n\\n* We introduced initiator only nodes in the diffusion simulation [pull-4280].\\n\\n* We fixed a connection-manager test failure [issue-4370].\\n\\n#### Technical Debt\\n\\n* We refactored `Snocket` interface decoupling it from the multiplexer\\n  [pull-4260]. This simplified some aspects of the KES agent implementation.\\n\\n* We introduces a record for CBOR codecs which are used for various data\\n  structures by mini-protocol codecs [pull-4430].\\n\\n#### Documentation\\n\\n* We explained some limitations of CDDL in our technical report [pull-4351].\\n\\n#### IO-Sim\\n\\n* We fixed implementation of `MVar`\'s [pull-70].\\n\\n#### NoThunks\\n\\n* We published a new version of [`nothunks`] library to Hackage.\\n\\n### Next steps\\n\\n* Finish implementation & testing of eclipse evasion [issue-3886].\\n* Optimise connectivity to peers behind firewall [issue-4381].\\n* Finish the work on enabling block production dynamically to allow using P2P\\n  on block producers [issue-3159].\\n* If time permits we would like also to reserve some time for finishing\\n  publication of `io-sim` to Hackage.\\n\\n\\n[cardano-node-1.35.6]: https://github.com/input-output-hk/cardano-node/releases/tag/1.35.6\\n[cardano-node-1.35.7]: https://github.com/input-output-hk/cardano-node/releases/tag/1.35.7\\n\\n[pull-4019]: https://github.com/input-output-hk/ouroboros-network/pull/4019\\n[pull-4277]: https://github.com/input-output-hk/ouroboros-network/pull/4277\\n[pull-4260]: https://github.com/input-output-hk/ouroboros-network/pull/4260\\n[pull-4265]: https://github.com/input-output-hk/ouroboros-network/pull/4265\\n[pull-4280]: https://github.com/input-output-hk/ouroboros-network/pull/4280\\n[pull-4351]: https://github.com/input-output-hk/ouroboros-network/pull/4351\\n[pull-4357]: https://github.com/input-output-hk/ouroboros-network/pull/4357\\n[pull-4385]: https://github.com/input-output-hk/ouroboros-network/pull/4385\\n[pull-4430]: https://github.com/input-output-hk/outoboros-network/pull/4430\\n[pull-4460]: https://github.com/input-output-hk/outoboros-network/pull/4460\\n[pull-4462]: https://github.com/input-output-hk/outoboros-network/pull/4462\\n[pull-4465]: https://github.com/input-output-hk/outoboros-network/pull/4465\\n[pull-4467]: https://github.com/input-output-hk/outoboros-network/pull/4467\\n[pull-4419]: https://github.com/input-output-hk/outoboros-network/pull/4419\\n\\n[pull-4902]: https://github.com/input-output-hk/cardano-node/pull/4902\\n\\n[issue-3159]: https://github.com/input-output-hk/ouroboros-network/issues/3159\\n[issue-3886]: https://github.com/input-output-hk/ouroboros-network/issues/3886\\n[issue-4370]: https://github.com/input-output-hk/ouroboros-network/issues/4370\\n[issue-4381]: https://github.com/input-output-hk/ouroboros-network/issues/4381\\n\\n[pull-70]: https://github.com/input-output-hk/io-sim/pull/70\\n\\n[`nothunks`]: https://hackage.haskell.org/package/nothunks"},{"id":"2023-04-03-ledger","metadata":{"permalink":"/quarterly/2023-04-03-ledger","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-04-03-ledger.md","source":"@site/quarterly/2023-04-03-ledger.md","title":"Ledger Team Update","description":"Ledger Quarterly Update","date":"2023-04-03T00:00:00.000Z","formattedDate":"April 3, 2023","tags":[{"label":"ledger","permalink":"/quarterly/tags/ledger"}],"readingTime":6.405,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2023-04-03-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"Network Q1 2023 Update","permalink":"/quarterly/2023-04-04-network"},"nextItem":{"title":"Consensus Quarterly Update","permalink":"/quarterly/2023-01-18-consensus"}},"content":"## Ledger Quarterly Update\\n## 2023-01 - 2023-03\\n\\n### Main achievements\\n\\n#### CIPs\\n\\n* **Entering the Voltaire phase** -\\n  CIP-1694 received a major update after participation in the design has expanded to\\n  more and more people, including those who attended the Colorado workshop.\\n  See [CIP-1694](https://github.com/cardano-foundation/CIPs/pull/380).\\n* **Ledger CIP category** -\\n  The ledger team continues to embrace the CIP process, and has begun the process of\\n  registering the ledger as an official CIP category.\\n  See [CIP-84](https://github.com/cardano-foundation/CIPs/pull/456).\\n* **Ledger serialization** -\\n  A CIP for the ledger serialization deprecation cycle has been accepted.\\n  See [CIP-80](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0080).\\n\\n#### Formal ledger model\\n\\nOur new formal specifications backed by Agda have seen a lot of progress.\\nThe majority of the ideas in CIP-1694 are now present, and we have made enough progress\\nthat we can now safely say that the PDF produced by the Agda model will be the\\nofficial ledger specification for the Conway ledger era.\\nSee [the repository](https://github.com/input-output-hk/formal-ledger-specifications).\\n\\n\\n#### Conway ledger era\\n\\nProgress on the Haskell implementation of CIP-1694 has gone hand in hand with the formal model.\\nThe major component still missing is the DRep stake distribution, which still presents some\\ntechnical challenges.\\n\\n[[pull-3176]]\\n[[pull-3216]]\\n[[pull-3226]]\\n[[pull-3291]]\\n[[pull-3326]]\\n[[pull-3330]]\\n[[pull-3339]]\\n\\n#### DRep stake distribution computation\\n\\nAdding another large stake distribution to the ledger state must proceed with caution.\\nWe do not want the memory used by the node to increase too much,\\nand performance problems can lead to reduced block production.\\nWe have prototyped, tested, and benchmarked several approaches that could give us\\nthe current DRep stake distribution at each epoch boundary.\\nThis has very important implications, since we want every ADA holder to be able to at any\\ntime (such as during a contentious vote) register themselves as a DRep and still have time\\nto vote themselves on the issue.\\n\\n[[pull-3344]]\\n[[pull-3353]]\\n[[pull-3364]]\\n\\n#### Integration work\\n\\nThe ledger has made some wonderful improvements over the past six months,\\nbut which entail a significant amount of integration efforts:\\n\\n* Our new versioned CBOR schemes\\n* Individual deposit tracking\\n* An improved cross-era interface utilizing lenses\\n* A new ledger API\\n* Re-arranging the ledger stake in preparation for CIP-1694\\n* Versioning our Haskell packages\\n  using [CHaPs](https://github.com/input-output-hk/cardano-haskell-packages).\\n* Consistent conventions for variable names\\n\\n\\n[[pull-3279]]\\n[[pull-3282]]\\n[[pull-3288]]\\n[[pull-3289]]\\n[[pull-3292]]\\n[[pull-3297]]\\n[[pull-3298]]\\n[[pull-3299]]\\n[[pull-3300]]\\n[[pull-3302]]\\n[[pull-3303]]\\n[[pull-3308]]\\n[[pull-3342]]\\n[[pull-3345]]\\n[[pull-3356]]\\n[[pull-3357]]\\n[[pull-3360]]\\n[[pull-3361]]\\n[[pull-3363]]\\n[[pull-4349]]\\n[[pull-378]]\\n[[pull-376]]\\n[[pull-373]]\\n[[pull-370]]\\n[[pull-361]]\\n[[pull-4976]]\\n[[pull-5013]]\\n\\n#### Deposit tracking\\n\\nIndividual deposits (for stake credential and stake pool registrations) were not tracked by the ledger.\\nDeposits were returned according to the current protocol parameters.\\nWhen the values of these two protocol parameters change, the deposit pot\\nis adjusted by adding to, or removing from, the reserves.\\n\\nThis has several problems:\\n* Most people expect a deposit to be paid back exactly.\\n* We cannot increase the deposit amount once the reserves hits zero.\\n* If it becomes known that the deposit amount is going to be increased, free Lovelace can be earned by registering credentials.\\n* Because of the problems above, it is going to be incredibly hard to ever change the values.\\n* There is a serious issue involving hard forks.\\n  The consensus layer makes the decision about whether or not to enact a hard fork based on\\n  the protocol parameter update state two stability windows before the end of the epoch.\\n  However, the ledger will reject a protocol parameter update on the epoch boundary\\n  if the deposit pot adjustments cannot be reconciled with the reseve pot.\\n  This means that if quorum is met regarding changing the major protocol version,\\n  but the update is rejected on the epoch boundary, consensus will change the era but the\\n  ledger will not change the major protocol version, leaving the ledger in a split-brain state.\\n\\nBecause we never actually changed the values of the two deposits amounts in the protocol parameters\\non mainnet, we were able to retroactively change the behavior.\\nWe made the following changes:\\n  * Individual deposits are tracked in the `DState`.\\n  * The amount deposited is always returned.\\n\\n[[pull-3195]]\\n[[pull-3202]]\\n[[pull-3217]]\\n\\n#### New ledger API\\n\\nWe have significantly built up the ledger API.\\nWe will eventually replace much of the `cardano-api` in the node repository with this ledger API.\\n\\n[[pull-3242]]\\n[[pull-3248]]\\n[[pull-3328]]\\n\\n#### Constraint-based generators\\n\\nOur largest scale property tests generate an initial ledger state and a long sequence of valid blocks\\nwhich span several epochs, mimicking a real network.\\nThese tests are, in theory, excellent for checking properties.\\nThey are, however, very difficult to maintain and are not as random as we would like\\n(a lot of bias has to be introduced to keep the ledger state in enough order to keep generating blocks).\\n\\nWe have a new declaritive infrastructure for building constraint-based generators,\\nwhich instead generate a random ledger state representative of not just an initial state,\\nbut also those representative of the end result of a long sequence of valid blocks.\\nMoreover, these generators are very fast and are much more random than our old generators.\\nBefore we can start using them for our existing property tests, however, we still need to\\nexpand them to generate a valid block for a given ledger state.\\n\\n[[pull-3219]]\\n\\n#### Technical debt\\n\\nWe continued to address technical debt as much as we can.\\n\\n[[pull-3167]]\\n[[pull-3170]]\\n[[pull-3172]]\\n[[pull-3175]]\\n[[pull-3184]]\\n[[pull-3205]]\\n[[pull-3208]]\\n[[pull-3210]]\\n[[pull-3212]]\\n[[pull-3218]]\\n[[pull-3222]]\\n[[pull-3223]]\\n[[pull-3224]]\\n[[pull-3225]]\\n[[pull-3229]]\\n[[pull-3239]]\\n[[pull-3241]]\\n[[pull-3244]]\\n[[pull-3245]]\\n[[pull-3249]]\\n[[pull-3260]]\\n[[pull-3263]]\\n[[pull-3264]]\\n[[pull-3268]]\\n[[pull-3269]]\\n[[pull-3270]]\\n[[pull-3274]]\\n[[pull-3276]]\\n[[pull-3277]]\\n[[pull-3286]]\\n[[pull-3290]]\\n[[pull-3295]]\\n[[pull-3296]]\\n[[pull-3306]]\\n[[pull-3307]]\\n[[pull-3310]]\\n[[pull-3311]]\\n[[pull-3316]]\\n[[pull-3320]]\\n[[pull-3323]]\\n[[pull-3327]]\\n[[pull-3331]]\\n[[pull-3332]]\\n[[pull-3333]]\\n[[pull-3338]]\\n[[pull-3341]]\\n[[pull-3347]]\\n[[pull-3350]]\\n[[pull-3351]]\\n[[pull-3352]]\\n[[pull-3354]]\\n\\n##### Critical fixes\\n\\nWe fixed two critical issues:\\n* Growing block production delay on the epoch boundary: [[pull-3209]]\\n* Unexpected node shutdown from `balanceR`: [[pull-3343]]\\n\\n### Next steps\\n\\n* **Conway spec** -\\n  Complete the first version of the conway formal specification.\\n* **DRep stake distribution** -\\n  Have the ledger compute the DRep stake distribution with acceptible performance.\\n* **Devnet ready** -\\n  Have the Haskell implementation of the conway era in sync with the formal specification,\\n  and integrate the changes with consensus and node.\\n  All the details might not be finalized, but the wire specification and the API should\\n  be stable so that conway can be placed on a devnet for tool builders to start integrating with.\\n* **Plutus V3** -\\n  Integrate Plutus V3 into the ledger, including a new script context which supports DReps.\\n\\n### More details\\n\\nThis quarterly report was based off of the following fortnightly ones:\\n\\n* [2023-01-05](2023-01-05-ledger)\\n* [2023-01-19](2023-01-19-ledger)\\n* [2023-02-02](2023-02-02-ledger)\\n* [2023-02-17](2023-02-17-ledger)\\n* [2023-03-03](2023-03-03-ledger)\\n* [2023-03-17](2023-03-17-ledger)\\n* [2023-03-31](2023-03-31-ledger)\\n\\n[pull-3167]: https://github.com/input-output-hk/cardano-ledger/pull/3167\\n[pull-3170]: https://github.com/input-output-hk/cardano-ledger/pull/3170\\n[pull-3172]: https://github.com/input-output-hk/cardano-ledger/pull/3172\\n[pull-3175]: https://github.com/input-output-hk/cardano-ledger/pull/3175\\n[pull-3176]: https://github.com/input-output-hk/cardano-ledger/pull/3176\\n[pull-3184]: https://github.com/input-output-hk/cardano-ledger/pull/3184\\n[pull-3195]: https://github.com/input-output-hk/cardano-ledger/pull/3195\\n[pull-3202]: https://github.com/input-output-hk/cardano-ledger/pull/3202\\n[pull-3205]: https://github.com/input-output-hk/cardano-ledger/pull/3205\\n[pull-3208]: https://github.com/input-output-hk/cardano-ledger/pull/3208\\n[pull-3209]: https://github.com/input-output-hk/cardano-ledger/pull/3209\\n[pull-3210]: https://github.com/input-output-hk/cardano-ledger/pull/3210\\n[pull-3212]: https://github.com/input-output-hk/cardano-ledger/pull/3212\\n[pull-3214]: https://github.com/input-output-hk/cardano-ledger/pull/3214\\n[pull-3215]: https://github.com/input-output-hk/cardano-ledger/pull/3215\\n[pull-3216]: https://github.com/input-output-hk/cardano-ledger/pull/3216\\n[pull-3217]: https://github.com/input-output-hk/cardano-ledger/pull/3217\\n[pull-3218]: https://github.com/input-output-hk/cardano-ledger/pull/3218\\n[pull-3219]: https://github.com/input-output-hk/cardano-ledger/pull/3219\\n[pull-3222]: https://github.com/input-output-hk/cardano-ledger/pull/3222\\n[pull-3223]: https://github.com/input-output-hk/cardano-ledger/pull/3223\\n[pull-3224]: https://github.com/input-output-hk/cardano-ledger/pull/3224\\n[pull-3225]: https://github.com/input-output-hk/cardano-ledger/pull/3225\\n[pull-3226]: https://github.com/input-output-hk/cardano-ledger/pull/3226\\n[pull-3229]: https://github.com/input-output-hk/cardano-ledger/pull/3229\\n[pull-3239]: https://github.com/input-output-hk/cardano-ledger/pull/3239\\n[pull-3241]: https://github.com/input-output-hk/cardano-ledger/pull/3241\\n[pull-3242]: https://github.com/input-output-hk/cardano-ledger/pull/3242\\n[pull-3244]: https://github.com/input-output-hk/cardano-ledger/pull/3244\\n[pull-3245]: https://github.com/input-output-hk/cardano-ledger/pull/3245\\n[pull-3248]: https://github.com/input-output-hk/cardano-ledger/pull/3248\\n[pull-3249]: https://github.com/input-output-hk/cardano-ledger/pull/3249\\n[pull-3260]: https://github.com/input-output-hk/cardano-ledger/pull/3260\\n[pull-3263]: https://github.com/input-output-hk/cardano-ledger/pull/3263\\n[pull-3264]: https://github.com/input-output-hk/cardano-ledger/pull/3264\\n[pull-3268]: https://github.com/input-output-hk/cardano-ledger/pull/3268\\n[pull-3269]: https://github.com/input-output-hk/cardano-ledger/pull/3269\\n[pull-3270]: https://github.com/input-output-hk/cardano-ledger/pull/3270\\n[pull-3274]: https://github.com/input-output-hk/cardano-ledger/pull/3274\\n[pull-3276]: https://github.com/input-output-hk/cardano-ledger/pull/3276\\n[pull-3277]: https://github.com/input-output-hk/cardano-ledger/pull/3277\\n[pull-3279]: https://github.com/input-output-hk/cardano-ledger/pull/3279\\n[pull-3282]: https://github.com/input-output-hk/cardano-ledger/pull/3282\\n[pull-3286]: https://github.com/input-output-hk/cardano-ledger/pull/3286\\n[pull-3288]: https://github.com/input-output-hk/cardano-ledger/pull/3288\\n[pull-3289]: https://github.com/input-output-hk/cardano-ledger/pull/3289\\n[pull-3290]: https://github.com/input-output-hk/cardano-ledger/pull/3290\\n[pull-3291]: https://github.com/input-output-hk/cardano-ledger/pull/3291\\n[pull-3292]: https://github.com/input-output-hk/cardano-ledger/pull/3292\\n[pull-3295]: https://github.com/input-output-hk/cardano-ledger/pull/3295\\n[pull-3296]: https://github.com/input-output-hk/cardano-ledger/pull/3296\\n[pull-3297]: https://github.com/input-output-hk/cardano-ledger/pull/3297\\n[pull-3298]: https://github.com/input-output-hk/cardano-ledger/pull/3298\\n[pull-3299]: https://github.com/input-output-hk/cardano-ledger/pull/3299\\n[pull-3300]: https://github.com/input-output-hk/cardano-ledger/pull/3300\\n[pull-3302]: https://github.com/input-output-hk/cardano-ledger/pull/3302\\n[pull-3303]: https://github.com/input-output-hk/cardano-ledger/pull/3303\\n[pull-3306]: https://github.com/input-output-hk/cardano-ledger/pull/3306\\n[pull-3307]: https://github.com/input-output-hk/cardano-ledger/pull/3307\\n[pull-3308]: https://github.com/input-output-hk/cardano-ledger/pull/3308\\n[pull-3310]: https://github.com/input-output-hk/cardano-ledger/pull/3310\\n[pull-3311]: https://github.com/input-output-hk/cardano-ledger/pull/3311\\n[pull-3316]: https://github.com/input-output-hk/cardano-ledger/pull/3316\\n[pull-3320]: https://github.com/input-output-hk/cardano-ledger/pull/3320\\n[pull-3323]: https://github.com/input-output-hk/cardano-ledger/pull/3323\\n[pull-3326]: https://github.com/input-output-hk/cardano-ledger/pull/3326\\n[pull-3327]: https://github.com/input-output-hk/cardano-ledger/pull/3327\\n[pull-3328]: https://github.com/input-output-hk/cardano-ledger/pull/3328\\n[pull-3330]: https://github.com/input-output-hk/cardano-ledger/pull/3330\\n[pull-3331]: https://github.com/input-output-hk/cardano-ledger/pull/3331\\n[pull-3332]: https://github.com/input-output-hk/cardano-ledger/pull/3332\\n[pull-3333]: https://github.com/input-output-hk/cardano-ledger/pull/3333\\n[pull-3338]: https://github.com/input-output-hk/cardano-ledger/pull/3338\\n[pull-3339]: https://github.com/input-output-hk/cardano-ledger/pull/3339\\n[pull-3341]: https://github.com/input-output-hk/cardano-ledger/pull/3341\\n[pull-3342]: https://github.com/input-output-hk/cardano-ledger/pull/3342\\n[pull-3343]: https://github.com/input-output-hk/cardano-ledger/pull/3343\\n[pull-3344]: https://github.com/input-output-hk/cardano-ledger/pull/3344\\n[pull-3345]: https://github.com/input-output-hk/cardano-ledger/pull/3345\\n[pull-3347]: https://github.com/input-output-hk/cardano-ledger/pull/3347\\n[pull-3350]: https://github.com/input-output-hk/cardano-ledger/pull/3350\\n[pull-3351]: https://github.com/input-output-hk/cardano-ledger/pull/3351\\n[pull-3352]: https://github.com/input-output-hk/cardano-ledger/pull/3352\\n[pull-3353]: https://github.com/input-output-hk/cardano-ledger/pull/3353\\n[pull-3354]: https://github.com/input-output-hk/cardano-ledger/pull/3354\\n[pull-3356]: https://github.com/input-output-hk/cardano-ledger/pull/3356\\n[pull-3357]: https://github.com/input-output-hk/cardano-ledger/pull/3357\\n[pull-3360]: https://github.com/input-output-hk/cardano-ledger/pull/3360\\n[pull-3361]: https://github.com/input-output-hk/cardano-ledger/pull/3361\\n[pull-3363]: https://github.com/input-output-hk/cardano-ledger/pull/3363\\n[pull-3364]: https://github.com/input-output-hk/cardano-ledger/pull/3364\\n\\n[pull-4349]: https://github.com/input-output-hk/ouroboros-network/pull/4349\\n\\n[pull-378]: https://github.com/input-output-hk/cardano-base/pull/378\\n[pull-376]: https://github.com/input-output-hk/cardano-base/pull/376\\n[pull-373]: https://github.com/input-output-hk/cardano-base/pull/373\\n[pull-370]: https://github.com/input-output-hk/cardano-base/pull/370\\n[pull-361]: https://github.com/input-output-hk/cardano-base/pull/361\\n\\n[pull-4976]: https://github.com/input-output-hk/cardano-node/pull/4976\\n[pull-5013]: https://github.com/input-output-hk/cardano-node/pull/5013"},{"id":"2023-01-18-consensus","metadata":{"permalink":"/quarterly/2023-01-18-consensus","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-01-18-consensus.md","source":"@site/quarterly/2023-01-18-consensus.md","title":"Consensus Quarterly Update","description":"Consensus Quarterly Update","date":"2023-01-18T00:00:00.000Z","formattedDate":"January 18, 2023","tags":[{"label":"consensus","permalink":"/quarterly/tags/consensus"}],"readingTime":3.205,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Quarterly Update","slug":"2023-01-18-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/quarterly/2023-04-03-ledger"},"nextItem":{"title":"Network Quarterly Update","permalink":"/quarterly/2023-01-13-network"}},"content":"## Consensus Quarterly Update\\n## 2022-12 - 2023-01\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\nThe prototype is feature complete and thoroughly tested at the consensus level.\\nIn particular, we invested a lot of time in writing property-test for the\\nmempool, and other crucial new parts of the prototype. Now we are ready to run\\nintegration tests and system-level benchmarks.\\n\\n#### Genesis\\n\\nWe identified and fixed a slowdown in cross-era forecasting that was inhibiting\\nour efforts to benchmark the ChainSync Jumping prototype. This resulted in a 7%\\nspeedup in full sync times in the baseline.\\n\\nWe also started prototyping a self-contained implementation of the Genesis\\ndynamics (in particular of the parts intentionally not part of the ChainSync\\nJumping prototype) that furthered our understanding of subtleties and edge\\ncases.\\n\\n#### Support\\n\\n- We worked on designing integration of new VRF and KES crypto into consensus.\\n    - `Crypto` class was split into two parts: `Crypto` and `HeaderCrypto`.\\n    - With the Ledger team\'s help, we refactored `cardano-ledger` to use a proxy\\n      type for VRF.\\n\\n#### Conway era\\n\\n- PR went through its second review round. It is about to be merged, but it got\\n  delayed due to people\'s availability during Christmas break.\\n\\n#### Technical debt\\n\\n- We improved the capabilities of our `io-sim` library, which is key for testing\\n  and simulating Cardano components.\\n- We removed thunks from epoch translations in the ledger, which is important\\n  for reducing memory consumption of the Cardano node.\\n\\n#### Fostering collaboration\\n\\n- We added a tutorial on how to instantiate the Consensus layer to run custom\\n  ledgers. This should be a valuable resource to people looking to roll their\\n  own custom blockchain (either for commercial or research purposes).\\n- We added an overview of consensus to the [top level\\n  documentation](https://ouroboros-network.cardano.intersectmbo.org/) of\\n  ouroboros-network. This overview describes the consensus components and adds a\\n  hyperlinked map to the modules documentation.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- Evaluate the extensibility of the prototype. Moving the UTxO to disk is only\\n  the first step towards reducing the memory requirements of Cardano node, and\\n  ensuring its long term sustainability. In the future, we plan on moving other\\n  large maps, such as delegation maps. The prototype should be able to\\n  accommodate these changes without any major modifications.\\n- Start the integration with other downstream components, such as the wallet and\\n  db-sync. The idea is to identify and address any potential pain points that\\n  might arise during this integration.\\n- Run integration tests and system-level benchmarks.\\n\\n#### Genesis\\n\\n- Finish benchmarking and tuning the fast-path ChainSync Jumping prototype\\n- Expand and optimize the self-contained implementation of the Disconnect Rule\\n  (including density comparisons and the LoE)\\n- Develop documentation and smoke tests for these components.\\n- Start modifying the ChainSync Client for the LoP and LoR.\\n\\n#### Support\\n\\n- Help the Network team with diagnosing performance regression in block\\n  production.\\n\\n#### Tech debt\\n\\n- Fix property-test failures concerning iterators ([#3999][issue-3999] and\\n  [#4183][issue-4183]).\\n\\n#### Fostering collaboration\\n\\n- Finish [mapping consensus][issue-4145].\\n\\n### Risks \\n\\n#### UTxO HD\\n\\n- Moving other parts of the ledger state to disk might require a major redesign\\n  of the prototype. For instance, if it turns out that the epoch change rules\\n  require access to the *full* ledger state. If this is the case, we might\\n  accept this risk and do the redesign after the initial release of UTxO-HD.\\n- Integration with downstream clients might require more work than we\\n  anticipate.\\n- Access to the benchmarking\'s team time and resources.\\n- Benchmarking results might show significant performance degradation, which\\n  will require additional work if such performance degradation is not accepted\\n  by other stakeholders.\\n- The prototype\'s performance might not be accepted by other stakeholders. Here\\n  we need to clearly communicate that this is necessary to ensure that as the\\n  blockchain size grows, the node can operate within reasonable memory\\n  constraints.\\n\\n[issue-4183]: https://github.com/input-output-hk/ouroboros-network/issues/4183\\n[issue-3999]: https://github.com/input-output-hk/ouroboros-network/issues/3999\\n[issue-4145]: https://github.com/input-output-hk/ouroboros-network/issues/4145"},{"id":"2023-01-13-network","metadata":{"permalink":"/quarterly/2023-01-13-network","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-01-13-network.md","source":"@site/quarterly/2023-01-13-network.md","title":"Network Quarterly Update","description":"Network Quarterly Update","date":"2023-01-13T00:00:00.000Z","formattedDate":"January 13, 2023","tags":[{"label":"network","permalink":"/quarterly/tags/network"}],"readingTime":4.125,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Quarterly Update","slug":"2023-01-13-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Quarterly Update","permalink":"/quarterly/2023-01-18-consensus"},"nextItem":{"title":"Open-Source Update","permalink":"/quarterly/2023-01-13-open-source"}},"content":"## Network Quarterly Update\\n## 2022-11 - 2023-01\\n\\n### Summary\\n\\nThe primary goal of the networking team was to focus on the single relay\\nrelease of P2P.  We fixed a number of small late bugs, and concluded QA\\n& performance testing.  Although it was discovered a regression in performance\\nof  block production when P2P is enabled, relaying with P2P performs better\\ncomparing to a non p2p.  We concluded that this is not a blocker for the Single\\nRelay Release which is planned shortly.\\n\\n[Peer sharing][pr #4019] has gone through review and final review is\\njust being done right now.  After merging it will still be disabled (hidden\\nbehind a flag) as it\'s not safe without eclipse evasion.  We started\\nimplementing light peer sharing (i.e. include inbound peers into known peer set\\nof the outbound governor).\\n\\nWe started a detailed eclipse evasion design, it will continue in the next\\nquarter.\\n\\nWe also made a major revision of package structure of the network packages.  We\\nended up with a very clean dependency graph ([pr #4155]).\\n\\nArmando Santos delivered a talk at the [ODOPIS 2022] conference on principles\\nof distributed systems in Brussels.  The slides are available [here][ODOPIS-slides].\\n\\nNeil Davies gave an invited seminar on `DeltaQ` at Universit\xe9 Catholique de\\nLouvain.\\n\\nWe also found and fixed a few of bugs:\\n\\n* a bug in keep alive mini-protocol which resulted in warm to cold transitions\\n  to be always executed through a timeout path rather than do a clean demotion\\n  ([pr #4168]).\\n\\n* fixed an assetion failure in the outbound governor ([issue #4177]) \\n\\n- we fixed DNS test failure [issue #4191]\\n\\n### Next steps\\n\\nWe will work towards the next release of P2P for block producer nodes.  This includes:\\n\\n* analysing performance regression for BP nodes when using P2P\\n* finish the work on controlling the block forger through node kernel ([pr #3800])\\n* address [issue #3907] and write a script to analyse deployment of P2P relays\\n\\nWe would like also to push forward eclipse evasion.   Although most of the work\\nhas be done already the release of `io-sim` on `Hackage` will happen in the\\nnext quarter.\\n\\nWe would also like to address [chain-sync timeout issue][issue #4244] recently\\ndiagnosed by Karl Knutsson.\\n\\nIf time permits we would also like to address some technical debt, especially:\\n\\n- [enable nothunk in diffusion tests][issue #3387]\\n- [refactor diffusion testnet simulation][issue #4085]\\n\\n### Risks\\n\\nThe performance regression for block producer with P2P needs to be investigated\\nin the near future.  This is blocker for the release of P2P on BP nodes.\\n\\n### Detailed log\\n\\n#### Contributions to Ouroboros-Network\\n\\n- We added `TraceDemoteLocalAsynchronous`, which enables notification of critical issues for SPOs\\n- We fixed `cardano-ping` compatibility with `NodeToNodeV_10` (P2P, [pr #4165])\\n- We fixed a bug in demotion peers to cold which affected P2P nodes ([commit-61058aa5c2])\\n- Karl Knutsson enhanced `SendFetchRequest` ([commit-bb1c3dddee]), open-source contribution)\\n- We turned `SizeInBytes` into a newtype.\\n- We extended `CONTRIBUTING.md`, `README.md`, added `CODE_OF_CONDUCT`.\\n- We fixed DNS test failure [issue #4191]\\n- We fixed a simulation bug found in [issue #4258]\\n- [pr #4168]\\n- [issue #4177]\\n\\n#### Contributions to Cardano-Node\\n\\n- We maintained the Single Relay Release [pr #4612], (e.g. fixing CI issues,\\n  Rebasing it when necessary, publishing packages to Cardano Haskell Packages);\\n- We enhanced `JSON` serialisation / deserialisation of `NodeToNodeVersion` and `NodeToClientVersion`;\\n\\n#### Contributions to IOSim\\n\\n- We started to use Cardano Haskell Packages for `IOSim` ([pr #48])\\n- We updated change log files\\n- We added support of `ghc-9.4` ([pr #50])\\n\\nWe also addressed the following issues in [pr #57] in order to prepare the package for publication on Hackage:\\n\\n- refactored `io-classes` timers API ([issue #46]);\\n- created a new package `si-timers` which exposes an interface using SI units\\n  and is safe on 32-bit systems ([issue #59]);\\n- added monad transformers instances for classes defined in `io-classes` ([issue #58]);\\n- created `io-classes-mtl` package which includes (experimental) instances for monad transformers;\\n- provide `MonadMonotonicTimeNSec` in `io-classes` and `MonadMonotonicTime` in `si-timers` (so that `io-classes` follow the `base` package);\\n- added  `registerCancellableDelay` in `si-timers` (which allowed us to hide fancy timer api and clean `io-classes`)\\n- added support for `js_HOST_ARCH` (the new GHC JS backend)\\n\\nNote the [pr #57] contains almost 40 commits, and was a major step forward for\\n`io-sim` ecosystem.  We also prepared a draft [pr #4281] which updates\\n`ouroboros-network`.\\n\\nOther changes for `1.0.0.0` release on Hackage:\\n\\n- Refactored test suite ([pr #47])\\n- Updated documentation, cabal files, `CONTRIBUTING`, `SECURITY` documents, etc in [pr #60], currently under review.\\n\\n[commit-61058aa5c2]: https://github.com/input-output-hk/ouroboros-network/pull/4170/commits/61058aa5c28a144d723aae183d1745552d757334\\n[commit-bb1c3dddee]: https://github.com/input-output-hk/ouroboros-network/pull/4170/commits/bb1c3dddeea78949f531c144bb4f2669eddf7f47\\n[issue #3387]: https://github.com/input-output-hk/ouroboros-network/issues/3387\\n[issue #3907]: https://github.com/input-output-hk/ouroboros-network/issues/3907\\n[issue #4085]: https://github.com/input-output-hk/ouroboros-network/issues/4085\\n[issue #4168]: https://github.com/input-output-hk/ouroboros-network/issues/4168\\n[issue #4177]: https://github.com/input-output-hk/ouroboros-network/issues/4177\\n[issue #4191]: https://github.com/input-output-hk/ouroboros-network/issues/4191\\n[issue #4244]: https://github.com/input-output-hk/ouroboros-network/issues/4244\\n[issue #4258]: https://github.com/input-output-hk/ouroboros-network/issues/4258\\n[issue #46]: https://github.com/input-output-hk/io-sim/issues/46\\n[issue #58]: https://github.com/input-output-hk/io-sim/issues/58\\n[issue #59]: https://github.com/input-output-hk/io-sim/issues/59\\n[pr #3800]: https://github.com/input-output-hk/ouroboros-network/pull/3800\\n[pr #4019]: https://github.com/input-output-hk/ouroboros-network/pull/4019\\n[pr #4155]: https://github.com/input-output-hk/ouroboros-network/pull/4155\\n[pr #4165]: https://github.com/input-output-hk/ouroboros-network/pull/4165\\n[pr #4281]: https://github.com/input-output-hk/cardano-node/pull/4281\\n[pr #4612]: https://github.com/input-output-hk/cardano-node/pull/4612\\n[pr #47]: https://github.com/input-output-hk/io-sim/pull/47\\n[pr #48]: https://github.com/input-output-hk/io-sim/pull/48\\n[pr #49]: https://github.com/input-output-hk/io-sim/pull/49\\n[pr #50]: https://github.com/input-output-hk/io-sim/pull/50\\n[pr #57]: https://github.com/input-output-hk/io-sim/pull/57\\n[pr #60]: https://github.com/input-output-hk/io-sim/pull/60\\n[ODOPIS 2022]: https://sites.uclouvain.be/OPODIS2022/armando-details.html\\n[ODOPIS-slides]: https://sites.uclouvain.be/OPODIS2022/slides/OPODIS2022-slides-Santos.pdf"},{"id":"2023-01-13-open-source","metadata":{"permalink":"/quarterly/2023-01-13-open-source","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2023-01-13-open-source.md","source":"@site/quarterly/2023-01-13-open-source.md","title":"Open-Source Update","description":"Open Source Quarterly Update","date":"2023-01-13T00:00:00.000Z","formattedDate":"January 13, 2023","tags":[{"label":"open-source","permalink":"/quarterly/tags/open-source"}],"readingTime":2.215,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Open-Source Update","slug":"2023-01-13-open-source","authors":"coot","tags":["open-source"],"hide_table_of_contents":false},"prevItem":{"title":"Network Quarterly Update","permalink":"/quarterly/2023-01-13-network"},"nextItem":{"title":"Consensus Quarterly Update","permalink":"/quarterly/2022-11-15-consensus"}},"content":"## Open Source Quarterly Update\\n## 2022-11 - 2023-01\\n\\n### Summary\\n\\nIn the last quarter the open-source initiative delivered a comprehensive report\\non the state of our repositories.  As part of this work stream we\\nidentified the key open-source repositories for the cardano project across all\\nthe projects  From a list of more than 500 repositories (some of which are\\nforks) we identified key repositories which constitute the core of Cardano.\\n20 of them were identified as to be transferred to the future MBO which will\\ngovern Cardano development.  Some where excluded (like [`io-sim`] and\\n[`typed-protocols`]), to be govern by IOG, since they have a much broader\\napplication than Cardano itself, and thus we think their open-source future\\nwill be better outside of the Cardano umbrella.\\n\\nChristian Taylor identified a number of ways we can improve our repositories to\\nmake them more attractive for open-source contributions by analysing each of\\nthem.  This includes adding or improving various documentation files, like\\n`CONTRIBUTING` files, adding code of conduct, improving readme files, issue\\n& pull request templates etc.  Christian also computed various interesting\\nmetrics which gives a very good insight into the development practices: e.g.\\naverage merge ratio, average number of reviews, comments and many more!  The\\npresentation is available [here][open-source-presentation].\\n\\nWe followed with work on the [Cardano Engineering Handbook][CEH].  We included\\na standard code of conduct which is now used by most important projects in the\\nCardano space.  We included `cardano-node`\'s security policy and added\\na responsible disclosure policy.  We also described how roles and\\nresponsibilities should be clarified.  This progress was made by\\na collaborative effort of the Cardano Core, Plutus and Architecture teams, and\\nit wouldn\'t be possible without Michael Peyton Jones, Arnaud Bailly, Kevin\\nHammond, Jared Corduan and Marcin Szamotulski.\\n\\nWe also improved the documentation of key repositories, by adding description,\\nimproving their `README` file & `CONTRIBUTING` files, adding code of conducts\\nfollowing the [Cardano Engineering Handbook][CEH].  This includes improvements to:\\n\\n* [`ouroboros-network`] (both `network` & `consensus`)\\n* [`cardano-ledger`]\\n* [`cardano-node`]\\n\\nAnd also\\n\\n* [`io-sim`]\\n* [`typed-protocols`]\\n* [`cardano-prelude`] (work in progress)\\n\\nThe work was carried by Marcin Szamotulski, Addie Girouard and  Jared Corduan. \\n\\n\\nIn this quarter we also identified a number of projects which can be published to\\n`Hackage` (Haskell\'s package repository) or `crate` (Rust package repository).\\nThe list contains 21 packages, 2 of which ([`hedgehog-extras`] and\\n[`quickcheck-dynamic`]) are already published on Hackage and another 5 (from\\nthe [`io-sim`] repository) are close to be published.\\n\\n\\n### Detailed log\\n\\nThe progress of the open-source project is tracked in [this project][open-source-project].\\n\\n[CEH]: https://input-output-hk.github.io/cardano-engineering-handbook/\\n[open-source-project]: https://github.com/orgs/input-output-hk/projects/60/views/1\\n[`cardano-ledger`]: https://github.com/input-output-hk/cardano-ledger\\n[`cardano-node`]: https://github.com/input-output-hk/cardano-node\\n[`cardano-prelude`]: https://github.com/input-output-hk/cardano-prelude\\n[`hedgehog-extras`]: https://hackage.haskell.org/package/hedgehog-extras\\n[`io-sim`]: https://github.com/input-output-hk/io-sim\\n[`ouroboros-network`]: https://github.com/input-output-hk/ouroboros-network\\n[`quickcheck-dynamic`]: https://hackage.haskell.org/package/quickcheck-dynamic\\n[`typed-protocols`]: https://github.com/input-output-hk/typed-protocols\\n[open-source-presentation]: https://docs.google.com/presentation/d/127IFEavlrZeeoFrVXFYWzSt0ugOkSL7isxjyM1vmMzQ"},{"id":"2022-11-15-consensus","metadata":{"permalink":"/quarterly/2022-11-15-consensus","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2022-11-15-consensus.md","source":"@site/quarterly/2022-11-15-consensus.md","title":"Consensus Quarterly Update","description":"Consensus Quarterly Update","date":"2022-11-15T00:00:00.000Z","formattedDate":"November 15, 2022","tags":[{"label":"consensus","permalink":"/quarterly/tags/consensus"}],"readingTime":3.655,"hasTruncateMarker":false,"authors":[{"name":"Damian Nadales","title":"Consensus Team Lead","url":"https://github.com/dnadales","imageURL":"https://github.com/dnadales.png","key":"dnadales"}],"frontMatter":{"title":"Consensus Quarterly Update","slug":"2022-11-15-consensus","authors":"dnadales","tags":["consensus"],"hide_table_of_contents":false},"prevItem":{"title":"Open-Source Update","permalink":"/quarterly/2023-01-13-open-source"},"nextItem":{"title":"Network Team Update","permalink":"/quarterly/2022-11-09-network"}},"content":"## Consensus Quarterly Update\\n## 2022-09 - 2022-11\\n\\n### Main achievements\\n\\n#### UTxO HD\\n\\n- As a consequence of the errors observed when running distributed mempool\\n  benchmarks, we re-designed the UTxO HD mempool integration, which fixed these\\n  errors and lead to a simpler and more maintainable design.\\n\\n- We focused on increasing test coverage for the UTxO-HD prototype. In\\n  particular, we added property tests for:\\n  - Backing store (work ongoing)\\n  - Era transitions\\n\\n- The property tests we added uncovered several bugs, which is a great result\\n  given the exponential increase in the cost of finding bugs as they are closer\\n  to deployment.\\n\\n- One of the errors found by our tests required us to work on improvements in\\n  the Haskell bindings for LMDB. This work is ongoing.\\n\\n- We started working on the mempool property tests that will exercise the new\\n  code paths that UTxO HD introduced.\\n\\n- We developed, benchmarked and tested an implementation of sequences of\\n  differences based on \\"anti-diffs\\". Performance results of diff sequence\\n  operations show that we achieved a speedup of about `4x` across several\\n  scenarios. Note: this speedup is taking into account diff sequence operations\\n  only, so the consensus-wide speedup is less than `4x`.\\n\\n- We integrated the \\"anti-diff\\" prototype into the UTxO HD feature branch.\\n\\n#### Genesis\\n\\n- We wrote a simulator that demonstrates soundness of an abstract implementation\\n  of the new chain selection rule.\\n- We elaborated a draft specification for the Genesis implementation (currently\\n  awaiting feedback from other architects).\\n- We elaborated a draft specification for the ChainSync Jumping optimization. In\\n  particular, this includes a proof sketch that the latter preserves liveness\\n  and safety in all cases.\\n- With the Networking team, we co-designed the eclipse avoidance mechanism,\\n  specifically its coherence with the Genesis implementation plan\'s security\\n  and its dependence on the new ChainSync Jumping optimization.\\n- We implemented a prototype for ChainSync Jumping. Initial benchmarks showed a\\n  performance degradation wrt the baseline. Our optimization attempts so far\\n  have brought the performance closer to the baseline, but not yet to parity.\\n\\n#### Conway era\\n\\n- We did most of the heavy lifting required to integrate the Conway era into the\\n  Consensus layer.\\n\\n#### Technical debt\\n\\n- We started working on enabling CI nightly tests, which revealed several test\\n  failures due to thunks being found it data structures used by the ledger and\\n  consensus. We made a lot of progress fixing those thunk errors, but some\\n  errors still remain.\\n\\n- We elaborated a `db-analyser` benchmark for the ledger operations. This led us\\n  to the identification of high processing time at epoch boundaries, and we\\n  could not observe any performance degradation that can be attributed to era\\n  changes.\\n\\n- We fixed a source of flakiness in the ChainDB QSM test.\\n\\n- We clarified a common source of confusion around VRF tie-breaking and\\n  cross-era chain selection.\\n\\n- We fixed a bug in the maximum-allowed ledger major protocol version.\\n\\n#### Fostering collaboration\\n\\n- We spent time making `cardano-updates` the central source of information for\\n  the core teams stakeholders.\\n- We went through the Galois gap analysis and extracted actionable points to\\n  take on next.\\n- Bart and Yogesh continued with their onboarding and stated making substantial\\n  contributions to consensus.\\n\\n### Next steps\\n\\n#### UTxO HD\\n\\n- Finish the mempool property tests.\\n- Benchmark the latest version of the prototype.\\n- Elaborate a document that describes new integration test scenarios and pass it\\n  to the SDET team.\\n- Bring query UTxO by address command performance on par with the baseline\\n  version.\\n\\n#### Genesis\\n\\n- Receive and incorporate Duncan\'s feedback on the first draft specification for\\n  the Genesis implementation.\\n- Begin prototyping the first genesis implementation, unless the first draft\\n  needs major changes.\\n- Draft a second revision of the Genesis report.\\n- Review the second revision with a wider audience, which includes at least\\n  Alexander Russell. That feedback will drive a third and hopefully final\\n  revision.\\n- Investigate how to mitigate the ~30% slowdown we have observed so far in the\\n  ChainSync jumping prototype, and try to mitigate it. In particular, we might\\n  need to optimize the existing BlockFetch logic.\\n\\n#### Tech debt\\n\\n- Enabling nightly CI tests.\\n\\n#### Fostering collaboration\\n\\n- Merge the tutorial document Galois wrote; requires CI integration.\\n- Come up with our own documentation improvements, many of which were suggested\\n  in the Galois gap analysis.\\n- Try to hire a new team member."},{"id":"2022-11-09-network","metadata":{"permalink":"/quarterly/2022-11-09-network","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2022-11-09-network.md","source":"@site/quarterly/2022-11-09-network.md","title":"Network Team Update","description":"Network Quarterly Update","date":"2022-11-09T00:00:00.000Z","formattedDate":"November 9, 2022","tags":[{"label":"network","permalink":"/quarterly/tags/network"}],"readingTime":3.87,"hasTruncateMarker":false,"authors":[{"name":"Marcin Szamotulski","title":"Network Team Lead","url":"https://github.com/coot","imageURL":"https://github.com/coot.png","key":"coot"}],"frontMatter":{"title":"Network Team Update","slug":"2022-11-09-network","authors":"coot","tags":["network"],"hide_table_of_contents":false},"prevItem":{"title":"Consensus Quarterly Update","permalink":"/quarterly/2022-11-15-consensus"},"nextItem":{"title":"Ledger Team Update","permalink":"/quarterly/2022-11-07-ledger"}},"content":"## Network Quarterly Update\\n## 2022-09 - 2022-11\\n\\n### Summary of most important improvements\\n\\nDuring this quarter the networking team delivered low level specification of\\npeer sharing & eclipse evasion.  We held a session with the consensus & the\\nscientists; we got a positive feedback on the design.\\n\\nFurther we focused on implementation of peer sharing.  We produced a [detail\\ndesign][peer-sharing-design] and an [early implementation][peer-sharing-pr].\\n\\nWe prepared the _P2P Single Relay Release_ (`cardano-node-1.35.5`).  It\\nincludes over [130 patches][p2p-release] of network stack improvements over the\\nprevious version `1.35.4`, which were accomplished over a longer period of\\ntime.  Among them are both bug fixes and UX improvements for stake pool\\noperators like simplified format of the [topology file][topology-file], or\\nimprovements in the logged messages:\\n\\n* [tracing of early consensus exceptions][consensus-startup-trace]\\n* [tracing of demotion of local root peers][demotion-trace] (traced with\\n  `Warning` severity), the trace is called `TraceDemoteLocalAsynchronous`, in\\n  `json` format it is encoded as `DemoteLocalAsynchronous`.  For an SPO\\n  tracking these demotion is vital (such demotion could indicate that a block\\n  producer is no longer connected to its relays or vice versa)\\n\\nWe also provide better integration with [systemd][socket-activation] (socket\\nactivation improvements) or improvements in the networking stack:\\n\\n* [exit policies][exit-policy],\\n* [peer metrics improvements][peer-metrics],\\n* [DNS TTL][dns-ttl] improvements (which make it harder to misconfigure the\\n  system, an issue discovered by the performance & monitoring team),\\n* do not trigger inbound idle timeout for `node-to-client` connections ([pr\\n  #3844][idle-timeout]), an issue reported to us by Matthias Benkort from\\n  Cardano Foundation.\\n\\nDuncan has been making progress with the input endorsers demo. His simulation\\nprovides a useful animated visualisation and live quantification of behaviour\\nof the modeled design.\\n\\nWe also improved our e2e diffusion simulation by implementing header-body\\nsplit, similar to what the real implementation does.\\n\\nWe also made some advances towards our future goals of P2P release for block\\nproducer nodes ([pr #3800][pr-3800] - in review) & for Daedalus users\\n([pr #3690][pr-3690] - merged).\\n\\n### Detailed log\\n\\n* We expanded diffusion simulation with block-fetch protocol bringing it closer\\n  to the production system.\\n\\n* We addressed some additional technical depth in diffusion simulation\\n\\n* We slightly improved documentation & CI of io-sim and typed-protocols\\n  repositories for open-source contributors.\\n\\n* We closed a number of issues towards publishing io-sim on Hackage (only two\\n  essential issues are left open).\\n\\n* We pushed a branch of typed-protocols which captures one of the developer UX\\n  problems in the API which we need to solve.\\n\\n* We identified and fixed an issue related to systemd sockets.\\n\\n* We identified and fixed an issue in consensus initialisation not giving\\n  feedback on early errors.\\n\\n* We deployed RT View, identified a number of issues which were communicated to\\n  the performance & monitoring team.\\n\\n* We finished high level & detailed design of peer sharing, very early\\n  implementation of peer sharing is done (note that peer sharing cannot be\\n  safely deployed without eclipse evasion & genesis).\\n\\n* We finished high level design of eclipse evasion, and started working on\\n  a detailed design.\\n\\n* We were assigned the role of release engineer for 1.35.5 release (the P2P\\n  single relay release); we prepared a cardano-node for 1.35.5 release which\\n  contains more than 130 patches of just network stack improvements done over\\n  last few months.\\n\\n* We diagnosed and fixed an tricky bug in the peer state actions (a component\\n  which sits between outbound governor and connection manager). That bug was\\n  introduced earlier this year and never released. It was caught by the QA\\n  testing framework. We expanded our diffusion simulation to cover such case and\\n  also mitigated a chance for reintroducing such a bug in future.\\n\\n* We identified and quite likely mitigated a misconfiguration in the\\n  benchmarking cluster (next benchmarking run will confirm our hypothesis).\\n\\n* We simplified the format of p2p topology file, we got positive feedback from\\n  SPOs.\\n\\n* We raised severities of some of the logging messages, which is an important\\n  improvement for SPOs, exchanges and other users of the system.\\n\\n* We worked on input endorsers simulation which gives both animated and\\n  quantified live feedback on network operation, using a simplified model of\\n  a TCP/IP network. \\n\\n## Next quarter\\n\\n* Release the Single Relay P2P Release `1.35.5`.\\n\\n* Carry on with Peer Sharing (review, testing).\\n\\n* Deliver a talk at [Conference on Principles of Distributed Systems 2022][OPODIS2022] in Brussels, Belgium.\\n\\n* Present Detailed Design of Eclipse Evasion and start implementation phase.\\n\\n* Work on P2P Block Producer release.\\n\\n* Carry on with publishing of `io-sim` on `Hackage`.\\n\\n[OPODIS2022]: https://sites.uclouvain.be/OPODIS2022/ \\n[peer-sharing-design]: https://github.com/input-output-hk/ouroboros-network/wiki/Peer-Sharing-Implementation-Plan\\n[peer-sharing-pr]: https://github.com/input-output-hk/ouroboros-network/pull/4019\\n[p2p-release]: https://github.com/input-output-hk/ouroboros-network/pull/4120\\n[exit-policy]: https://github.com/input-output-hk/ouroboros-network/pull/3785\\n[peer-metrics]: https://github.com/input-output-hk/ouroboros-network/pull/3915\\n[socket-activation]: https://github.com/input-output-hk/ouroboros-network/pull/3979\\n[topology-file]: https://github.com/input-output-hk/cardano-node/pull/4563\\n[dns-ttl]: https://github.com/input-output-hk/ouroboros-network/pull/4106\\n[consensus-startup-trace]: https://github.com/input-output-hk/ouroboros-network/pull/4015\\n[demotion-trace]: https://github.com/input-output-hk/ouroboros-network/pull/4127\\n[idle-timeout]: https://github.com/input-output-hk/ouroboros-network/pull/3844\\n[pr-3800]: https://github.com/input-output-hk/ouroboros-network/pull/3800\\n[pr-3690]: https://github.com/input-output-hk/ouroboros-network/issues/3968"},{"id":"2022-11-07-ledger","metadata":{"permalink":"/quarterly/2022-11-07-ledger","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2022-11-07-ledger.md","source":"@site/quarterly/2022-11-07-ledger.md","title":"Ledger Team Update","description":"Ledger Quarterly Update","date":"2022-11-07T00:00:00.000Z","formattedDate":"November 7, 2022","tags":[{"label":"ledger","permalink":"/quarterly/tags/ledger"}],"readingTime":1.255,"hasTruncateMarker":false,"authors":[{"name":"Jared Corduan","title":"Ledger Team Lead","url":"https://github.com/JaredCorduan","imageURL":"https://github.com/JaredCorduan.png","key":"JaredCorduan"}],"frontMatter":{"title":"Ledger Team Update","slug":"2022-11-07-ledger","authors":"JaredCorduan","tags":["ledger"],"hide_table_of_contents":false},"prevItem":{"title":"Network Team Update","permalink":"/quarterly/2022-11-09-network"},"nextItem":{"title":"Node API & CLI Team Update","permalink":"/quarterly/2022-10-07-node-cli-api"}},"content":"## Ledger Quarterly Update\\n## 2022-09 - 2022-11-04\\n\\n* We finished a minimal ledger era capable of master key rotation.\\n  This will be re-purposed our upcoming work.\\n* We have the humble beginnings of a proper ledger API.\\n* We improved the problematic cost model serialization\\n  (recall the song and dance about updating the cost model one epoch after the hard fork).\\n* We have added benchmarks for problematic areas.\\n* Massive repository restructure and cleanup.\\n  * Unified and consistent variable name schemes (not completely finished, but nearly there).\\n  * Massive reduction in type constraints, which causes a lot of developer friction,\\n    in our code and also downstream.\\n  * More organized module structures.\\n  * Improved generators for our property tests.\\n  * We removed our dependency on cardano-prelude.\\n* The formal ledger model has come a long way.\\n  * We created a fork of Agda that provides some meta-programming support for the ledger rules.\\n  * We have a large amount of the basic UTxO support in the model.\\n  * We can generate a good looking PDF from the model.\\n  * We can produce Haskell from the model.\\n  * We have a nice finite set theory library that we can use for many of the ledger rules.\\n  * We have nix support for the model.\\n\\n## Next steps\\n\\n  * Individual tracking of deposits. [[issue-3113]]\\n  * Versioned CBOR encoders/decoders. [[issue-3014]]\\n  * New ledger era transaction body (and the surround work associated with it).\\n  * Designs for the next ledger era.\\n\\n[issue-3113]: https://github.com/input-output-hk/cardano-ledger/issues/3113\\n[issue-3014]: https://github.com/input-output-hk/cardano-ledger/issues/3014"},{"id":"2022-10-07-node-cli-api","metadata":{"permalink":"/quarterly/2022-10-07-node-cli-api","editUrl":"https://github.com/intersectmbo/cardano-updates/tree/main/quarterly/2022-11-07-nod-api-cli.md","source":"@site/quarterly/2022-11-07-nod-api-cli.md","title":"Node API & CLI Team Update","description":"Node-Api-Cli Quarterly Update","date":"2022-11-07T00:00:00.000Z","formattedDate":"November 7, 2022","tags":[{"label":"cli-api-quarterly","permalink":"/quarterly/tags/cli-api-quarterly"}],"readingTime":1.355,"hasTruncateMarker":false,"authors":[{"name":"Jordan Millar","title":"Node Team Lead","url":"https://github.com/Jimbo4350","imageURL":"https://github.com/Jimbo4350.png","key":"Jimbo4350"}],"frontMatter":{"title":"Node API & CLI Team Update","slug":"2022-10-07-node-cli-api","authors":"Jimbo4350","tags":["cli-api-quarterly"],"hide_table_of_contents":false},"prevItem":{"title":"Ledger Team Update","permalink":"/quarterly/2022-11-07-ledger"}},"content":"## Node-Api-Cli Quarterly Update\\n## 2022-09 - 2022-11-04\\n\\n- Various improvements to tests/CI/GHC 9.2.4 preparations/upgrade to cabal-3.8.1.0\\n- Major clean up of stale iusses + PRs.\\n- Implementation of stale-bot to mitigate against a proliferation of outdated issues and PRs\\n- cardano-api refactoring with the aim of exposing more user friendly functions, particularly concerning transaction construction and querying the node.\\n- cardano-cli refactoring with the aim of moving reusable functions to cardano-api. We have made strides here and have managed to improve the interface of transaction construction and validation.\\n- General documentation updates and improvements\\n- Addition of tx-mempool command which allows users to:\\n  - Query the node about the current mempool\'s capacity and sizes\\n  - Request the next transaction from the mempool\'s current list\\n  - Query if a particular transaction exists in the mempool\\n-  Initial refactoring of cardano-testnet\\n\\nNext quarter\\n\\n- cardano-api\\n  - Working with Konstantinos and his team to make cardano-api better for dapp developers - we have a google doc for this, I can send it to you privately.\\n- cardano-testnet\\n  - Working with Marc Fontaine to create an easy to use executable to deploy testnets locally - https://github.com/input-output-hk/cardano-node/issues/4598\\n- Serenity\\n  - Continued refactoring of cardano-api and cardano-cli, with the particular focus on extracting re-usable components of cardano-cli and moving them to cardano-api. This is harder to define but will manifest in stuff moving from cardano-cli to cardano-api and is tied in to the cardano-api work specified above.\\n- General bug fixing and smaller feature requests for the api/cli that are always coming in. Robert is primarily handling this at the moment as he is relatively new."}]}')}}]);