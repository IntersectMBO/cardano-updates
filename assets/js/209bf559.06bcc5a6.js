"use strict";(self.webpackChunkcardano_updates=self.webpackChunkcardano_updates||[]).push([[80367],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>m});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(o),h=r,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||i;return o?n.createElement(m,a(a({ref:t},u),{},{components:o})):n.createElement(m,a({ref:t},u))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=o[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}h.displayName="MDXCreateElement"},73937:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=o(87462),r=(o(67294),o(3905));const i={title:"Network Team Update",slug:"2023-10-02-network",authors:"coot",tags:["network"],hide_table_of_contents:!1},a=void 0,s={permalink:"/2023-10-02-network",editUrl:"https://github.com/intersectmbo/cardano-updates/tree/main/blog/2023-10-02-network.md",source:"@site/blog/2023-10-02-network.md",title:"Network Team Update",description:"High-level overview of sprint 45",date:"2023-10-02T00:00:00.000Z",formattedDate:"October 2, 2023",tags:[{label:"network",permalink:"/tags/network"}],readingTime:2.485,hasTruncateMarker:!1,authors:[{name:"Marcin Szamotulski",title:"Network Team Lead",url:"https://github.com/coot",imageURL:"https://github.com/coot.png",key:"coot"}],frontMatter:{title:"Network Team Update",slug:"2023-10-02-network",authors:"coot",tags:["network"],hide_table_of_contents:!1},prevItem:{title:"Mithril Team Update",permalink:"/2023-10-04-mithril"},nextItem:{title:"Goedel Team Update",permalink:"/2023-09-29-goedel"}},l={authorsImageUrls:[void 0]},p=[{value:"High-level overview of sprint 45",id:"high-level-overview-of-sprint-45",level:2},{value:"Bootstrap Peers",id:"bootstrap-peers",level:3},{value:"Towards Typed Protocols 0.2.0.0",id:"towards-typed-protocols-0200",level:3},{value:"Tech Debt",id:"tech-debt",level:3},{value:"IO-Sim",id:"io-sim",level:3},{value:"IOSimPOR",id:"iosimpor",level:4},{value:"IOSim",id:"iosim",level:4},{value:"Cardano Newtork Service Assurance",id:"cardano-newtork-service-assurance",level:3},{value:"P2P adoption",id:"p2p-adoption",level:3},{value:"Open Source",id:"open-source",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"high-level-overview-of-sprint-45"},"High-level overview of ",(0,r.kt)("a",{parentName:"h2",href:"https://github.com/orgs/input-output-hk/projects/19/views/16?filterQuery=sprint%3A%22sprint+45%22"},"sprint 45")),(0,r.kt)("h3",{id:"bootstrap-peers"},"Bootstrap Peers"),(0,r.kt)("p",null,"We started reviewing the bootstrap peers PR, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/ouroboros-network/issues/4615"},"ouroboros-network#4615"),"."),(0,r.kt)("h3",{id:"towards-typed-protocols-0200"},"Towards Typed Protocols 0.2.0.0"),(0,r.kt)("p",null,"We discovered a performance regression when using ",(0,r.kt)("inlineCode",{parentName:"p"},"typed-protocols-0.2.0.0"),", and we\nstarted investigating where it comes from.  Currently, we see that\n",(0,r.kt)("inlineCode",{parentName:"p"},"typed-protocols-0.2.0.0")," can outperform ",(0,r.kt)("inlineCode",{parentName:"p"},"typed-protocols-0.1.0.0")," when running\nin isolation with a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"ping-pong")," protocol, so the regression might be in\nthe new block fetch implementation which comes with ",(0,r.kt)("inlineCode",{parentName:"p"},"typed-protocols-0.2.0.0"),"\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/typed-protocols/pull/3"},"typed-protocols#3"),"."),(0,r.kt)("h3",{id:"tech-debt"},"Tech Debt"),(0,r.kt)("p",null,"We merged two PRs written by Galois engineers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"a pull request which refactors the main entry function for P2P, see ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/issues/3834"},"ouroboros-network#3834"),"; "),(0,r.kt)("li",{parentName:"ul"},"a pull request which reviews usage of ",(0,r.kt)("inlineCode",{parentName:"li"},"unsafe")," function in the network code based.")),(0,r.kt)("p",null,"Galois also made progress with the following two issues:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"add microbenchmarks to some of our tests: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/issues/3832"},"ouroboros-network#3832")),(0,r.kt)("li",{parentName:"ul"},"inspect use of ",(0,r.kt)("inlineCode",{parentName:"li"},"error")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"ouroboros-network")," repository:\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/input-output-hk/ouroboros-network/issues/3836"},"ouroboros-network#3836"))),(0,r.kt)("h3",{id:"io-sim"},"IO-Sim"),(0,r.kt)("h4",{id:"iosimpor"},"IOSimPOR"),(0,r.kt)("p",null,"We found and fixed a bug in ",(0,r.kt)("inlineCode",{parentName:"p"},"IOSimPOR"),".  We'd like to thank Prof. John Hughes\n(Quviq AB) for helping us with debugging the issue."),(0,r.kt)("p",null,"We also provided a more uniform API for ",(0,r.kt)("inlineCode",{parentName:"p"},"IOSimPOR"),", and added ways to make the\ndebugging similar problems in the future easier."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Technical Details on IOSim refactoring"),"We removed the usage of `unsafePerformIO` from `IOSimPOR`, which also means removing parallel evaluation of discovered races.  We found out that it gives only 25% better performance.  In the future QuickCheck will offer running different cases in parallel which should provide better performance as there are no dependencies between the evaluation of different test cases, while schedules are discovered while running which limits the possible gains from running them concurrently.  The performance was not the only factor though.  When using parallelism in the lazy `ST` monad we'd need to rely on memory guarantees of `STRefs`.  In `GHC-9.6` they share the implementation with `IORef`s, but it might not be the case in the future."),(0,r.kt)("h4",{id:"iosim"},"IOSim"),(0,r.kt)("p",null,"To prepare for the next release, we consolidate packages taking advantage of\nthe public sublibraries supported now both by ",(0,r.kt)("inlineCode",{parentName:"p"},"cabal")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Hackage"),".   This is\na work in progress, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/io-sim/issues/114"},"io-sim#114"),"."),(0,r.kt)("h3",{id:"cardano-newtork-service-assurance"},"Cardano Newtork Service Assurance"),(0,r.kt)("p",null,"Galois made the following progress:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A test run of spinning up a CNSA instance was done, as a result documentation\nwas updated."),(0,r.kt)("li",{parentName:"ul"},"Based on the IOG code review of the CNSA code, updates to the CNSA code were\nmade."),(0,r.kt)("li",{parentName:"ul"},'Galois has started the design for adding a CNSA analysis for "fetched bytes\nover time while node is syncing".')),(0,r.kt)("h3",{id:"p2p-adoption"},"P2P adoption"),(0,r.kt)("p",null,"In the last two weeks, we've seen increase in P2P adoption.\n",(0,r.kt)("img",{alt:"P2P relays",src:o(53101).Z,width:"2668",height:"1576"})),(0,r.kt)("p",null,"The following graphs show several different versions of relays running on the mainnet.  The\ngreen line ",(0,r.kt)("inlineCode",{parentName:"p"},"NodeToNodeVersionV10.True")," denotes P2P relays.\n",(0,r.kt)("img",{alt:"node versions",src:o(40970).Z,width:"2674",height:"1580"})),(0,r.kt)("h3",{id:"open-source"},"Open Source"),(0,r.kt)("p",null,"We upstreamed our FFI bindings to Windows named pipes to ",(0,r.kt)("inlineCode",{parentName:"p"},"Win32")," package, the\nPR was accepted and merged."),(0,r.kt)("p",null,"We also received an external contribution which enhanced our documentation, see\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/input-output-hk/ouroboros-network/pull/4676"},"ouroboros-network#4676"),"."))}d.isMDXComponent=!0},53101:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/2023-10-04-p2p-relays-75c2baf57ea9346a40f0098b2abb4a99.png"},40970:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/2023-10-04-relay-versions-5168d3ed0ad365a18e86263fcccffd23.png"}}]);